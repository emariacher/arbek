Testing started at 22:13 ...
"C:\Program Files\Java\jdk1.8.0_45\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\idea_rt.jar=51185:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\bin" -Dfile.encoding=UTF-8 -classpath "C:\Users\ericm_000\.IdeaIC2018.3\config\plugins\Scala\lib\runners.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\zipfs.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\annotations.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\bootstrap.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\commons-httpclient-3.1-patched.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\extensions.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\forms_rt.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\hamcrest-core-1.3.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\icons.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\idea.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\idea_rt.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\javac2.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\jdkAnnotations.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\jdom.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\jna.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\jps-launcher.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\jps-model.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\log4j.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\markdownj-core-0.4.2-SNAPSHOT.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\microba.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\nanoxml-2.2.3.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\openapi.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\optimizedFileManager.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\resources.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\resources_en.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\rngom-20051226-patched.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\serviceMessages.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\trang-core.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\trove4j.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2018.3.1\lib\util.jar;C:\Users\ericm_000\Documents\GitHub\kebra\elliptique\target\scala-2.12\test-classes;C:\Users\ericm_000\Documents\GitHub\kebra\elliptique\target\scala-2.12\classes;C:\Users\ericm_000\.ivy2\cache\org.scala-lang\scala-library\jars\scala-library-2.12.4.jar;C:\Users\ericm_000\.ivy2\cache\org.scala-lang\scala-reflect\jars\scala-reflect-2.12.4.jar;C:\Users\ericm_000\.ivy2\cache\org.scala-lang.modules\scala-parser-combinators_2.12\bundles\scala-parser-combinators_2.12-1.0.4.jar;C:\Users\ericm_000\.ivy2\cache\org.scala-lang.modules\scala-xml_2.12\bundles\scala-xml_2.12-1.0.5.jar;C:\Users\ericm_000\.ivy2\cache\org.scalactic\scalactic_2.12\bundles\scalactic_2.12-3.0.1.jar;C:\Users\ericm_000\.ivy2\cache\org.scalatest\scalatest_2.12\bundles\scalatest_2.12-3.0.1.jar" org.jetbrains.plugins.scala.testingSupport.scalaTest.ScalaTestRunner -s Lesordres -C org.jetbrains.plugins.scala.testingSupport.scalaTest.ScalaTestReporter -showProgressMessages true
.1999.7993.13999.3001.37997.25999.88001.4001.14983.76001.9001.26993.51001.9973.28001.38993.76991.51991.10993.4999.88997.39989.52999.16001.28979.11987.5987.40993.16993.29989.13001.7001.17989.41999.30983.19997.43997.19001.42989.90001.54001.22993.21001.77999.46997.55001.31991.24001.21997.47981.78989.24989.48991.90997.79999.49999.44987.32999.93997.81001.45989.91997.94999.81973.33997.56999.55997.62989.34981.82997.96001.57991.59999.35999.83987.58997.97001.36997.63997.61001.84991.97987.69001.64997.61991.85999.93001.98999.70001.71999.65993.99991.86993.70999.66977.72997.73999.67993.74959


CheckLaBoucle241: 
Trouve les nombres premiers qui pourraient marcher pour y2 = x3 + 0x + 7
  e.curve.size > modlo & e.curve.filter(p => p._1 * p._2 == 0).isEmpty
     false --- e.curve.size 2 > modlo 2& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,1), (1,0))
     false --- e.curve.size 3 > modlo 3& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,1), (0,2), (2,0))
     false --- e.curve.size 5 > modlo 5& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((2,0))
     false --- e.curve.size 7 > modlo 7& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,0))
     false --- e.curve.size 11 > modlo 11& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((5,0))
     false --- e.curve.size 6 > modlo 13& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 17 > modlo 17& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((3,0))
     false --- e.curve.size 11 > modlo 19& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,8), (0,11), (10,0), (13,0), (15,0))
     false --- e.curve.size 23 > modlo 23& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((9,0))
     false --- e.curve.size 29 > modlo 29& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,6), (0,23), (13,0))
     false --- e.curve.size 20 > modlo 31& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,10), (0,21))
     false --- e.curve.size 38 > modlo 37& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,9), (0,28))
     false --- e.curve.size 41 > modlo 41& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((17,0))
     false --- e.curve.size 30 > modlo 43& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 47 > modlo 47& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,17), (0,30), (31,0))
     false --- e.curve.size 53 > modlo 53& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,22), (0,31), (10,0))
     false --- e.curve.size 59 > modlo 59& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,19), (0,40), (54,0))
     false --- e.curve.size 60 > modlo 61& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     true --- e.curve.size 78 > modlo 67& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 71 > modlo 71& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((4,0))
     false --- e.curve.size 63 > modlo 73& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((42,0), (44,0), (60,0))
     false --- e.curve.size 66 > modlo 79& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 83 > modlo 83& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,16), (0,67), (43,0))
     false --- e.curve.size 89 > modlo 89& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((15,0))
     false --- e.curve.size 78 > modlo 97& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 101 > modlo 101& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((93,0))
     false --- e.curve.size 110 > modlo 103& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,25), (0,78))
     false --- e.curve.size 107 > modlo 107& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((29,0))
     false --- e.curve.size 128 > modlo 109& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,15), (0,94))
     false --- e.curve.size 113 > modlo 113& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,32), (0,81), (30,0))
     false --- e.curve.size 126 > modlo 127& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 131 > modlo 131& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,20), (0,111), (14,0))
     false --- e.curve.size 137 > modlo 137& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,12), (0,125), (112,0))
     false --- e.curve.size 146 > modlo 139& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,29), (0,110))
     false --- e.curve.size 149 > modlo 149& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,56), (0,93), (37,0))
     false --- e.curve.size 132 > modlo 151& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 171 > modlo 157& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((20,0), (54,0), (83,0))
     false --- e.curve.size 138 > modlo 163& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 167 > modlo 167& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,72), (0,95), (138,0))
     false --- e.curve.size 173 > modlo 173& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((8,0))
     false --- e.curve.size 179 > modlo 179& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((27,0))
     false --- e.curve.size 207 > modlo 181& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((93,0), (120,0), (149,0))
     false --- e.curve.size 191 > modlo 191& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((49,0))
     false --- e.curve.size 218 > modlo 193& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,59), (0,134))
     false --- e.curve.size 197 > modlo 197& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,91), (0,106), (132,0))
     false --- e.curve.size 188 > modlo 199& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,87), (0,112))
     false --- e.curve.size 198 > modlo 211& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 251 > modlo 223& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,26), (0,197), (6,0), (11,0), (206,0))
     false --- e.curve.size 227 > modlo 227& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,37), (0,190), (143,0))
     true --- e.curve.size 258 > modlo 229& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 233 > modlo 233& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,70), (0,163), (215,0))
     false --- e.curve.size 239 > modlo 239& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((30,0))
     true --- e.curve.size 258 > modlo 241& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 251 > modlo 251& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,42), (0,209), (163,0))
     false --- e.curve.size 257 > modlo 257& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((217,0))
     false --- e.curve.size 263 > modlo 263& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((121,0))
     false --- e.curve.size 269 > modlo 269& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((60,0))
     false --- e.curve.size 242 > modlo 271& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,121), (0,150))
     false --- e.curve.size 272 > modlo 277& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,50), (0,227))
     false --- e.curve.size 281 > modlo 281& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,102), (0,179), (68,0))
     false --- e.curve.size 308 > modlo 283& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,63), (0,220))
     false --- e.curve.size 293 > modlo 293& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((112,0))
     false --- e.curve.size 326 > modlo 307& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,43), (0,264))
     false --- e.curve.size 311 > modlo 311& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,140), (0,171), (46,0))
     false --- e.curve.size 291 > modlo 313& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((46,0), (126,0), (141,0))
     false --- e.curve.size 317 > modlo 317& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,18), (0,299), (31,0))
     false --- e.curve.size 363 > modlo 331& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((21,0), (320,0), (321,0))
     false --- e.curve.size 371 > modlo 337& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,119), (0,218), (63,0), (298,0), (313,0))
     false --- e.curve.size 347 > modlo 347& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((12,0))
     false --- e.curve.size 312 > modlo 349& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 353 > modlo 353& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((286,0))
     false --- e.curve.size 359 > modlo 359& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((41,0))
     false --- e.curve.size 371 > modlo 367& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,47), (0,320), (172,0), (232,0), (330,0))
     false --- e.curve.size 335 > modlo 373& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,58), (0,315), (16,0), (68,0), (289,0))
     false --- e.curve.size 342 > modlo 379& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 383 > modlo 383& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,34), (0,349), (104,0))
     false --- e.curve.size 389 > modlo 389& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,120), (0,269), (44,0))
     false --- e.curve.size 396 > modlo 397& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 401 > modlo 401& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,85), (0,316), (82,0))
     false --- e.curve.size 402 > modlo 409& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 419 > modlo 419& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,114), (0,305), (284,0))
     false --- e.curve.size 443 > modlo 421& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,133), (0,288), (121,0), (315,0), (406,0))
     false --- e.curve.size 431 > modlo 431& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((294,0))
     false --- e.curve.size 396 > modlo 433& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 467 > modlo 439& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,165), (0,274), (78,0), (168,0), (193,0))
     false --- e.curve.size 443 > modlo 443& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((164,0))
     false --- e.curve.size 449 > modlo 449& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,160), (0,289), (337,0))
     false --- e.curve.size 488 > modlo 457& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,98), (0,359))
     false --- e.curve.size 461 > modlo 461& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((240,0))
     false --- e.curve.size 483 > modlo 463& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((57,0), (135,0), (271,0))
     false --- e.curve.size 467 > modlo 467& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,53), (0,414), (132,0))
     false --- e.curve.size 479 > modlo 479& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,38), (0,441), (43,0))
     false --- e.curve.size 531 > modlo 487& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((129,0), (137,0), (221,0))
     false --- e.curve.size 491 > modlo 491& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((375,0))
     true --- e.curve.size 510 > modlo 499& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 503 > modlo 503& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,55), (0,448), (220,0))
     false --- e.curve.size 509 > modlo 509& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((288,0))
     false --- e.curve.size 521 > modlo 521& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((216,0))
     false --- e.curve.size 488 > modlo 523& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,141), (0,382))
     false --- e.curve.size 587 > modlo 541& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,33), (0,508), (330,0), (372,0), (380,0))
(y2 = x3 + 0x + 7,TreeSet(67, 229, 241, 499))
(241,258,List((1,44), (2,16), (1,197), (2,225), (6,114), (6,127), (11,55), (12,17), (11,186), (14,10), (12,224), (15,44), (16,27), (14,231), (15,197), (17,10), (16,214), (19,29), (17,231), (20,81), (19,212), (20,160), (24,24), (24,217), (26,58), (27,13), (26,183), (27,228), (30,16), (30,225), (32,64), (32,177), (35,15), (36,106), (35,226), (36,135), (37,110), (37,131), (39,47), (39,194), (41,22), (42,95), (43,15), (41,219), (42,146), (44,29), (43,226), (44,212), (47,21), (48,71), (49,17), (47,220), (48,170), (50,13), (49,224), (51,95), (50,228), (51,146), (53,118), (53,123), (54,87), (54,154), (58,106), (58,135), (59,81), (59,160), (65,55), (66,58), (65,186), (67,22), (66,183), (67,219), (70,8), (70,233), (72,118), (72,123), (73,110), (73,131), (76,107), (76,134), (78,111), (78,130), (79,116), (79,125), (80,72), (80,169), (85,8), (86,8), (85,233), (87,87), (86,233), (87,154), (90,114), (90,127), (91,104), (91,137), (92,54), (92,187), (93,90), (93,151), (95,77), (95,164), (96,88), (96,153), (98,24), (99,47), (98,217), (100,87), (99,194), (100,154), (103,47), (103,194), (106,1), (107,23), (106,240), (108,112), (107,218), (109,25), (108,129), (110,98), (109,216), (110,143), (116,118), (116,123), (119,24), (119,217), (122,99), (122,142), (123,63), (124,70), (123,178), (124,171), (126,18), (126,223), (131,110), (131,131), (133,22), (133,219), (143,99), (144,1), (143,142), (145,114), (145,127), (144,240), (147,106), (147,135), (148,95), (148,146), (149,58), (149,183), (151,88), (151,153), (153,18), (153,223), (155,51), (156,51), (155,190), (156,190), (158,63), (159,23), (158,178), (160,104), (159,218), (160,137), (162,81), (163,15), (162,160), (164,13), (163,226), (165,55), (164,228), (166,72), (165,186), (166,169), (167,77), (167,164), (168,98), (168,143), (171,51), (171,190), (173,70), (173,171), (174,112), (174,129), (175,54), (175,187), (176,107), (176,134), (178,29), (178,212), (180,17), (180,224), (182,116), (182,125), (184,25), (185,70), (184,216), (185,171), (189,25), (190,90), (189,216), (190,151), (196,71), (196,170), (198,111), (198,130), (199,90), (199,151), (200,112), (200,129), (201,63), (201,178), (203,18), (204,98), (203,223), (204,143), (206,111), (206,130), (209,16), (210,10), (209,225), (211,64), (212,21), (210,231), (211,177), (212,220), (215,54), (216,23), (215,187), (217,99), (216,218), (217,142), (220,77), (220,164), (221,116), (221,125), (223,21), (223,220), (225,44), (226,27), (225,197), (226,214), (230,107), (230,134), (232,1), (231,104), (231,137), (232,240), (235,88), (235,153), (236,72), (236,169), (238,71), (239,64), (238,170), (240,27), (239,177), (240,214)))

***2*** 241 ***** 9 groupes pour les puissances de 2
  *2*****************************************2*
. (1,44)*2=(51,146)(
  *2  [,241,]). (51,146)*2=(171,51). (171,51)*2=(93,90). (93,90)*2=(151,153). (151,153)*2=(131,131). (131,131)*2=(212,220). (212,220)*2=(11,186). (11,186)*2=(160,137). (160,137)*2=(210,231). (210,231)*2=(158,178). (158,178)*2=(58,106). (58,106)*2=(6,114). (6,114)*2=(67,22). (67,22)*2=(182,125). (182,125)*2=(78,130). (78,130)*2=(87,154). (87,154)*2=(167,164). (167,164)*2=(184,216). (184,216)*2=(110,98). (110,98)*2=(166,169)(
  *2  [,241,]). (166,169)*2=(32,64). (32,64)*2=(30,225). (30,225)*2=(217,99). (217,99)*2=(164,13). (164,13)*2=(107,23). (107,23)*2=(196,170)(
  *2  [,241,]). (196,170)*2=(119,217). (119,217)*2=(163,226). (163,226)*2=(92,54). (92,54)*2=(53,118). (53,118)*2=(99,194). (99,194)*2=(162,81). (162,81)*2=(174,112). (174,112)*2=(26,183). (26,183)*2=(180,224). (180,224)*2=(1,44)
(    36,List((51,146), (171,51), (93,90), (151,153), (131,131), (212,220), (11,186), (160,137), (210,231), (158,178), (58,106), (6,114), (67,22), (182,125), (78,130), (87,154), (167,164), (184,216), (110,98), (166,169), (32,64), (30,225), (217,99), (164,13), (107,23), (196,170), (119,217), (163,226), (92,54), (53,118), (99,194), (162,81), (174,112), (26,183), (180,224), (1,44)))
  *2*****************************************2*
. (2,16)*2=(143,142)(
  *2  [,241,]). (143,142)*2=(27,228). (27,228)*2=(216,218). (216,218)*2=(238,71). (238,71)*2=(24,24). (24,24)*2=(43,15). (43,15)*2=(215,187). (215,187)*2=(116,123). (116,123)*2=(103,47). (103,47)*2=(59,160). (59,160)*2=(108,129). (108,129)*2=(66,58). (66,58)*2=(12,17). (12,17)*2=(225,197). (225,197)*2=(148,95). (148,95)*2=(156,190). (156,190)*2=(199,151). (199,151)*2=(235,88). (235,88)*2=(73,110). (73,110)*2=(223,21)(
  *2  [,241,]). (223,21)*2=(65,55). (65,55)*2=(91,104). (91,104)*2=(14,10). (14,10)*2=(123,63). (123,63)*2=(36,135). (36,135)*2=(145,127)(
  *2  [,241,]). (145,127)*2=(133,219). (133,219)*2=(221,116). (221,116)*2=(198,111). (198,111)*2=(54,87). (54,87)*2=(220,77). (220,77)*2=(189,25). (189,25)*2=(168,143). (168,143)*2=(236,72). (236,72)*2=(211,177). (211,177)*2=(2,16)
(    36,List((143,142), (27,228), (216,218), (238,71), (24,24), (43,15), (215,187), (116,123), (103,47), (59,160), (108,129), (66,58), (12,17), (225,197), (148,95), (156,190), (199,151), (235,88), (73,110), (223,21), (65,55), (91,104), (14,10), (123,63), (36,135), (145,127), (133,219), (221,116), (198,111), (54,87), (220,77), (189,25), (168,143), (236,72), (211,177), (2,16)))
  *2*****************************************2*
. (1,197)*2=(51,95)(
  *2  [,241,]). (51,95)*2=(171,190). (171,190)*2=(93,151). (93,151)*2=(151,88). (151,88)*2=(131,110). (131,110)*2=(212,21). (212,21)*2=(11,55). (11,55)*2=(160,104). (160,104)*2=(210,10). (210,10)*2=(158,63). (158,63)*2=(58,135). (58,135)*2=(6,127). (6,127)*2=(67,219). (67,219)*2=(182,116). (182,116)*2=(78,111). (78,111)*2=(87,87). (87,87)*2=(167,77). (167,77)*2=(184,25). (184,25)*2=(110,143). (110,143)*2=(166,72)(
  *2  [,241,]). (166,72)*2=(32,177). (32,177)*2=(30,16). (30,16)*2=(217,142). (217,142)*2=(164,228). (164,228)*2=(107,218). (107,218)*2=(196,71)(
  *2  [,241,]). (196,71)*2=(119,24). (119,24)*2=(163,15). (163,15)*2=(92,187). (92,187)*2=(53,123). (53,123)*2=(99,47). (99,47)*2=(162,160). (162,160)*2=(174,129). (174,129)*2=(26,58). (26,58)*2=(180,17). (180,17)*2=(1,197)
(    36,List((51,95), (171,190), (93,151), (151,88), (131,110), (212,21), (11,55), (160,104), (210,10), (158,63), (58,135), (6,127), (67,219), (182,116), (78,111), (87,87), (167,77), (184,25), (110,143), (166,72), (32,177), (30,16), (217,142), (164,228), (107,218), (196,71), (119,24), (163,15), (92,187), (53,123), (99,47), (162,160), (174,129), (26,58), (180,17), (1,197)))
  *2*****************************************2*
. (2,225)*2=(143,99)(
  *2  [,241,]). (143,99)*2=(27,13). (27,13)*2=(216,23). (216,23)*2=(238,170). (238,170)*2=(24,217). (24,217)*2=(43,226). (43,226)*2=(215,54). (215,54)*2=(116,118). (116,118)*2=(103,194). (103,194)*2=(59,81). (59,81)*2=(108,112). (108,112)*2=(66,183). (66,183)*2=(12,224). (12,224)*2=(225,44). (225,44)*2=(148,146). (148,146)*2=(156,51). (156,51)*2=(199,90). (199,90)*2=(235,153). (235,153)*2=(73,131). (73,131)*2=(223,220)(
  *2  [,241,]). (223,220)*2=(65,186). (65,186)*2=(91,137). (91,137)*2=(14,231). (14,231)*2=(123,178). (123,178)*2=(36,106). (36,106)*2=(145,114)(
  *2  [,241,]). (145,114)*2=(133,22). (133,22)*2=(221,125). (221,125)*2=(198,130). (198,130)*2=(54,154). (54,154)*2=(220,164). (220,164)*2=(189,216). (189,216)*2=(168,98). (168,98)*2=(236,169). (236,169)*2=(211,64). (211,64)*2=(2,225)
(    36,List((143,99), (27,13), (216,23), (238,170), (24,217), (43,226), (215,54), (116,118), (103,194), (59,81), (108,112), (66,183), (12,224), (225,44), (148,146), (156,51), (199,90), (235,153), (73,131), (223,220), (65,186), (91,137), (14,231), (123,178), (36,106), (145,114), (133,22), (221,125), (198,130), (54,154), (220,164), (189,216), (168,98), (236,169), (211,64), (2,225)))
  *2*****************************************2*
. (15,44)*2=(42,146)(
  *2  [,241,]). (42,146)*2=(155,51). (155,51)*2=(190,90). (190,90)*2=(96,153). (96,153)*2=(37,131). (37,131)*2=(47,220). (47,220)*2=(165,186). (165,186)*2=(231,137). (231,137)*2=(17,231). (17,231)*2=(201,178). (201,178)*2=(147,106). (147,106)*2=(90,114). (90,114)*2=(41,22). (41,22)*2=(79,125). (79,125)*2=(206,130). (206,130)*2=(100,154). (100,154)*2=(95,164). (95,164)*2=(109,216). (109,216)*2=(204,98). (204,98)*2=(80,169)(
  *2  [,241,]). (80,169)*2=(239,64). (239,64)*2=(209,225). (209,225)*2=(122,99). (122,99)*2=(50,13). (50,13)*2=(159,23). (159,23)*2=(48,170)(
  *2  [,241,]). (48,170)*2=(98,217). (98,217)*2=(35,226). (35,226)*2=(175,54). (175,54)*2=(72,118). (72,118)*2=(39,194). (39,194)*2=(20,81). (20,81)*2=(200,112). (200,112)*2=(149,183). (149,183)*2=(49,224). (49,224)*2=(15,44)
(    36,List((42,146), (155,51), (190,90), (96,153), (37,131), (47,220), (165,186), (231,137), (17,231), (201,178), (147,106), (90,114), (41,22), (79,125), (206,130), (100,154), (95,164), (109,216), (204,98), (80,169), (239,64), (209,225), (122,99), (50,13), (159,23), (48,170), (98,217), (35,226), (175,54), (72,118), (39,194), (20,81), (200,112), (149,183), (49,224), (15,44)))
  *2*****************************************2*
. (16,27)*2=(203,18)(
  *2  [,241,]). (203,18)*2=(230,107). (230,107)*2=(173,171). (173,171)*2=(144,240). (144,240)*2=(178,29). (178,29)*2=(226,214). (226,214)*2=(126,223). (126,223)*2=(176,134). (176,134)*2=(124,70). (124,70)*2=(106,1). (106,1)*2=(44,212). (44,212)*2=(240,27). (240,27)*2=(153,18). (153,18)*2=(76,107). (76,107)*2=(185,171). (185,171)*2=(232,240). (232,240)*2=(19,29). (19,29)*2=(16,214). (16,214)*2=(203,223). (203,223)*2=(230,134)(
  *2  [,241,]). (230,134)*2=(173,70). (173,70)*2=(144,1). (144,1)*2=(178,212). (178,212)*2=(226,27). (226,27)*2=(126,18). (126,18)*2=(176,107)(
  *2  [,241,]). (176,107)*2=(124,171). (124,171)*2=(106,240). (106,240)*2=(44,29). (44,29)*2=(240,214). (240,214)*2=(153,223). (153,223)*2=(76,134). (76,134)*2=(185,70). (185,70)*2=(232,1). (232,1)*2=(19,212). (19,212)*2=(16,27)
(    36,List((203,18), (230,107), (173,171), (144,240), (178,29), (226,214), (126,223), (176,134), (124,70), (106,1), (44,212), (240,27), (153,18), (76,107), (185,171), (232,240), (19,29), (16,214), (203,223), (230,134), (173,70), (144,1), (178,212), (226,27), (126,18), (176,107), (124,171), (106,240), (44,29), (240,214), (153,223), (76,134), (185,70), (232,1), (19,212), (16,27)))
  *2*****************************************2*
. (15,197)*2=(42,95)(
  *2  [,241,]). (42,95)*2=(155,190). (155,190)*2=(190,151). (190,151)*2=(96,88). (96,88)*2=(37,110). (37,110)*2=(47,21). (47,21)*2=(165,55). (165,55)*2=(231,104). (231,104)*2=(17,10). (17,10)*2=(201,63). (201,63)*2=(147,135). (147,135)*2=(90,127). (90,127)*2=(41,219). (41,219)*2=(79,116). (79,116)*2=(206,111). (206,111)*2=(100,87). (100,87)*2=(95,77). (95,77)*2=(109,25). (109,25)*2=(204,143). (204,143)*2=(80,72)(
  *2  [,241,]). (80,72)*2=(239,177). (239,177)*2=(209,16). (209,16)*2=(122,142). (122,142)*2=(50,228). (50,228)*2=(159,218). (159,218)*2=(48,71)(
  *2  [,241,]). (48,71)*2=(98,24). (98,24)*2=(35,15). (35,15)*2=(175,187). (175,187)*2=(72,123). (72,123)*2=(39,47). (39,47)*2=(20,160). (20,160)*2=(200,129). (200,129)*2=(149,58). (149,58)*2=(49,17). (49,17)*2=(15,197)
(    36,List((42,95), (155,190), (190,151), (96,88), (37,110), (47,21), (165,55), (231,104), (17,10), (201,63), (147,135), (90,127), (41,219), (79,116), (206,111), (100,87), (95,77), (109,25), (204,143), (80,72), (239,177), (209,16), (122,142), (50,228), (159,218), (48,71), (98,24), (35,15), (175,187), (72,123), (39,47), (20,160), (200,129), (149,58), (49,17), (15,197)))
  *2*****************************************2*
. (70,8)*2=(85,8)(
  *2  [,241,]). (85,8)*2=(86,8). (86,8)*2=(70,8)
(    3,List((85,8), (86,8), (70,8)))
  *2*****************************************2*
. (70,233)*2=(85,233)(
  *2  [,241,]). (85,233)*2=(86,233). (86,233)*2=(70,233)
(    3,List((85,233), (86,233), (70,233)))
(241,9,
  List((51,146), (171,51), (93,90), (151,153), (131,131), (212,220), (11,186), (160,137), (210,231), (158,178), (58,106), (6,114), (67,22), (182,125), (78,130), (87,154), (167,164), (184,216), (110,98), (166,169), (32,64), (30,225), (217,99), (164,13), (107,23), (196,170), (119,217), (163,226), (92,54), (53,118), (99,194), (162,81), (174,112), (26,183), (180,224), (1,44))
  List((143,142), (27,228), (216,218), (238,71), (24,24), (43,15), (215,187), (116,123), (103,47), (59,160), (108,129), (66,58), (12,17), (225,197), (148,95), (156,190), (199,151), (235,88), (73,110), (223,21), (65,55), (91,104), (14,10), (123,63), (36,135), (145,127), (133,219), (221,116), (198,111), (54,87), (220,77), (189,25), (168,143), (236,72), (211,177), (2,16))
  List((51,95), (171,190), (93,151), (151,88), (131,110), (212,21), (11,55), (160,104), (210,10), (158,63), (58,135), (6,127), (67,219), (182,116), (78,111), (87,87), (167,77), (184,25), (110,143), (166,72), (32,177), (30,16), (217,142), (164,228), (107,218), (196,71), (119,24), (163,15), (92,187), (53,123), (99,47), (162,160), (174,129), (26,58), (180,17), (1,197))
  List((143,99), (27,13), (216,23), (238,170), (24,217), (43,226), (215,54), (116,118), (103,194), (59,81), (108,112), (66,183), (12,224), (225,44), (148,146), (156,51), (199,90), (235,153), (73,131), (223,220), (65,186), (91,137), (14,231), (123,178), (36,106), (145,114), (133,22), (221,125), (198,130), (54,154), (220,164), (189,216), (168,98), (236,169), (211,64), (2,225))
  List((42,146), (155,51), (190,90), (96,153), (37,131), (47,220), (165,186), (231,137), (17,231), (201,178), (147,106), (90,114), (41,22), (79,125), (206,130), (100,154), (95,164), (109,216), (204,98), (80,169), (239,64), (209,225), (122,99), (50,13), (159,23), (48,170), (98,217), (35,226), (175,54), (72,118), (39,194), (20,81), (200,112), (149,183), (49,224), (15,44))
  List((203,18), (230,107), (173,171), (144,240), (178,29), (226,214), (126,223), (176,134), (124,70), (106,1), (44,212), (240,27), (153,18), (76,107), (185,171), (232,240), (19,29), (16,214), (203,223), (230,134), (173,70), (144,1), (178,212), (226,27), (126,18), (176,107), (124,171), (106,240), (44,29), (240,214), (153,223), (76,134), (185,70), (232,1), (19,212), (16,27))
  List((42,95), (155,190), (190,151), (96,88), (37,110), (47,21), (165,55), (231,104), (17,10), (201,63), (147,135), (90,127), (41,219), (79,116), (206,111), (100,87), (95,77), (109,25), (204,143), (80,72), (239,177), (209,16), (122,142), (50,228), (159,218), (48,71), (98,24), (35,15), (175,187), (72,123), (39,47), (20,160), (200,129), (149,58), (49,17), (15,197))
  List((85,8), (86,8), (70,8))
  List((85,233), (86,233), (70,233))
  )
(
[,241,],70,343000,0,7,-->,343007,64, vs ,233,54289,64)
(
[,241,],85,614125,0,7,-->,614132,64, vs ,233,54289,64)
(
[,241,],86,636056,0,7,-->,636063,64, vs ,233,54289,64)

***3*** 241 ***** 15 groupes pour les multiplications par 3
  *3*****************************************3*
- (1,44)*3=(160,104)(
  *3 [,241,])- (160,104)*3=(87,154)- (87,154)*3=(164,228)- (164,228)*3=(162,81)- (162,81)*3=(151,88)- (151,88)*3=(6,114)- (6,114)*3=(166,72)- (166,72)*3=(163,226)- (163,226)*3=(1,197)- (1,197)*3=(160,137)- (160,137)*3=(87,87)- (87,87)*3=(164,13)- (164,13)*3=(162,160)- (162,160)*3=(151,153)- (151,153)*3=(6,127)- (6,127)*3=(166,169)- (166,169)*3=(163,15)- (163,15)*3=(1,44)
(    18,List((160,104), (87,154), (164,228), (162,81), (151,88), (6,114), (166,72), (163,226), (1,197), (160,137), (87,87), (164,13), (162,160), (151,153), (6,127), (166,169), (163,15), (1,44)))
  *3*****************************************3*
- (2,16)*3=(116,118)(
  *3 [,241,])- (116,118)*3=(156,190)- (156,190)*3=(123,178)- (123,178)*3=(189,25)- (189,25)*3=(238,170)- (238,170)*3=(66,58)- (66,58)*3=(223,220)- (223,220)*3=(221,116)- (221,116)*3=(2,225)- (2,225)*3=(116,123)- (116,123)*3=(156,51)- (156,51)*3=(123,63)- (123,63)*3=(189,216)- (189,216)*3=(238,71)- (238,71)*3=(66,183)- (66,183)*3=(223,21)- (223,21)*3=(221,125)- (221,125)*3=(2,16)
(    18,List((116,118), (156,190), (123,178), (189,25), (238,170), (66,58), (223,220), (221,116), (2,225), (116,123), (156,51), (123,63), (189,216), (238,71), (66,183), (223,21), (221,125), (2,16)))
  *3*****************************************3*
- (11,55)*3=(78,130)(
  *3 [,241,])- (78,130)*3=(217,142)- (217,142)*3=(99,194)- (99,194)*3=(93,151)- (93,151)*3=(58,106)- (58,106)*3=(110,143)- (110,143)*3=(119,217)- (119,217)*3=(180,17)- (180,17)*3=(11,186)- (11,186)*3=(78,111)- (78,111)*3=(217,99)- (217,99)*3=(99,47)- (99,47)*3=(93,90)- (93,90)*3=(58,135)- (58,135)*3=(110,98)- (110,98)*3=(119,24)- (119,24)*3=(180,224)- (180,224)*3=(11,55)
(    18,List((78,130), (217,142), (99,194), (93,151), (58,106), (110,143), (119,217), (180,17), (11,186), (78,111), (217,99), (99,47), (93,90), (58,135), (110,98), (119,24), (180,224), (11,55)))
  *3*****************************************3*
- (12,17)*3=(65,186)(
  *3 [,241,])- (65,186)*3=(198,111)- (198,111)*3=(143,99)- (143,99)*3=(103,47)- (103,47)*3=(199,90)- (199,90)*3=(36,135)- (36,135)*3=(168,98)- (168,98)*3=(24,24)- (24,24)*3=(12,224)- (12,224)*3=(65,55)- (65,55)*3=(198,130)- (198,130)*3=(143,142)- (143,142)*3=(103,194)- (103,194)*3=(199,151)- (199,151)*3=(36,106)- (36,106)*3=(168,143)- (168,143)*3=(24,217)- (24,217)*3=(12,17)
(    18,List((65,186), (198,111), (143,99), (103,47), (199,90), (36,135), (168,98), (24,24), (12,224), (65,55), (198,130), (143,142), (103,194), (199,151), (36,106), (168,143), (24,217), (12,17)))
  *3*****************************************3*
- (14,10)*3=(220,164)(
  *3 [,241,])- (220,164)*3=(216,218)- (216,218)*3=(108,112)- (108,112)*3=(73,110)- (73,110)*3=(133,22)- (133,22)*3=(211,177)- (211,177)*3=(215,54)- (215,54)*3=(148,95)- (148,95)*3=(14,231)- (14,231)*3=(220,77)- (220,77)*3=(216,23)- (216,23)*3=(108,129)- (108,129)*3=(73,131)- (73,131)*3=(133,219)- (133,219)*3=(211,64)- (211,64)*3=(215,187)- (215,187)*3=(148,146)- (148,146)*3=(14,10)
(    18,List((220,164), (216,218), (108,112), (73,110), (133,22), (211,177), (215,54), (148,95), (14,231), (220,77), (216,23), (108,129), (73,131), (133,219), (211,64), (215,187), (148,146), (14,10)))
  *3*****************************************3*
- (15,44)*3=(231,104)(
  *3 [,241,])- (231,104)*3=(100,154)- (100,154)*3=(50,228)- (50,228)*3=(20,81)- (20,81)*3=(96,88)- (96,88)*3=(90,114)- (90,114)*3=(80,72)- (80,72)*3=(35,226)- (35,226)*3=(15,197)- (15,197)*3=(231,137)- (231,137)*3=(100,87)- (100,87)*3=(50,13)- (50,13)*3=(20,160)- (20,160)*3=(96,153)- (96,153)*3=(90,127)- (90,127)*3=(80,169)- (80,169)*3=(35,15)- (35,15)*3=(15,44)
(    18,List((231,104), (100,154), (50,228), (20,81), (96,88), (90,114), (80,72), (35,226), (15,197), (231,137), (100,87), (50,13), (20,160), (96,153), (90,127), (80,169), (35,15), (15,44)))
  *3*****************************************3*
- (16,27)*3=(176,107)(
  *3 [,241,])- (176,107)*3=(232,240)- (232,240)*3=(226,214)- (226,214)*3=(76,134)- (76,134)*3=(144,1)- (144,1)*3=(240,27)- (240,27)*3=(230,107)- (230,107)*3=(106,240)- (106,240)*3=(16,214)- (16,214)*3=(176,134)- (176,134)*3=(232,1)- (232,1)*3=(226,27)- (226,27)*3=(76,107)- (76,107)*3=(144,240)- (144,240)*3=(240,214)- (240,214)*3=(230,134)- (230,134)*3=(106,1)- (106,1)*3=(16,27)
(    18,List((176,107), (232,240), (226,214), (76,134), (144,1), (240,27), (230,107), (106,240), (16,214), (176,134), (232,1), (226,27), (76,107), (144,240), (240,214), (230,134), (106,1), (16,27)))
  *3*****************************************3*
- (17,10)*3=(95,164)(
  *3 [,241,])- (95,164)*3=(159,218)- (159,218)*3=(200,112)- (200,112)*3=(37,110)- (37,110)*3=(41,22)- (41,22)*3=(239,177)- (239,177)*3=(175,54)- (175,54)*3=(42,95)- (42,95)*3=(17,231)- (17,231)*3=(95,77)- (95,77)*3=(159,23)- (159,23)*3=(200,129)- (200,129)*3=(37,131)- (37,131)*3=(41,219)- (41,219)*3=(239,64)- (239,64)*3=(175,187)- (175,187)*3=(42,146)- (42,146)*3=(17,10)
(    18,List((95,164), (159,218), (200,112), (37,110), (41,22), (239,177), (175,54), (42,95), (17,231), (95,77), (159,23), (200,129), (37,131), (41,219), (239,64), (175,187), (42,146), (17,10)))
  *3*****************************************3*
- (19,29)*3=(126,223)(
  *3 [,241,])- (126,223)*3=(185,70)- (185,70)*3=(178,212)- (178,212)*3=(153,18)- (153,18)*3=(173,171)- (173,171)*3=(44,29)- (44,29)*3=(203,223)- (203,223)*3=(124,70)- (124,70)*3=(19,212)- (19,212)*3=(126,18)- (126,18)*3=(185,171)- (185,171)*3=(178,29)- (178,29)*3=(153,223)- (153,223)*3=(173,70)- (173,70)*3=(44,212)- (44,212)*3=(203,18)- (203,18)*3=(124,171)- (124,171)*3=(19,29)
(    18,List((126,223), (185,70), (178,212), (153,18), (173,171), (44,29), (203,223), (124,70), (19,212), (126,18), (185,171), (178,29), (153,223), (173,70), (44,212), (203,18), (124,171), (19,29)))
  *3*****************************************3*
- (26,58)*3=(212,220)(
  *3 [,241,])- (212,220)*3=(182,116)- (182,116)*3=(30,225)- (30,225)*3=(53,123)- (53,123)*3=(171,51)- (171,51)*3=(158,63)- (158,63)*3=(184,216)- (184,216)*3=(196,71)- (196,71)*3=(26,183)- (26,183)*3=(212,21)- (212,21)*3=(182,125)- (182,125)*3=(30,16)- (30,16)*3=(53,118)- (53,118)*3=(171,190)- (171,190)*3=(158,178)- (158,178)*3=(184,25)- (184,25)*3=(196,170)- (196,170)*3=(26,58)
(    18,List((212,220), (182,116), (30,225), (53,123), (171,51), (158,63), (184,216), (196,71), (26,183), (212,21), (182,125), (30,16), (53,118), (171,190), (158,178), (184,25), (196,170), (26,58)))
  *3*****************************************3*
- (27,13)*3=(59,160)(
  *3 [,241,])- (59,160)*3=(235,153)- (235,153)*3=(145,127)- (145,127)*3=(236,169)- (236,169)*3=(43,15)- (43,15)*3=(225,44)- (225,44)*3=(91,104)- (91,104)*3=(54,154)- (54,154)*3=(27,228)- (27,228)*3=(59,81)- (59,81)*3=(235,88)- (235,88)*3=(145,114)- (145,114)*3=(236,72)- (236,72)*3=(43,226)- (43,226)*3=(225,197)- (225,197)*3=(91,137)- (91,137)*3=(54,87)- (54,87)*3=(27,13)
(    18,List((59,160), (235,153), (145,127), (236,169), (43,15), (225,44), (91,104), (54,154), (27,228), (59,81), (235,88), (145,114), (236,72), (43,226), (225,197), (91,137), (54,87), (27,13)))
  *3*****************************************3*
- (32,64)*3=(92,187)(
  *3 [,241,])- (92,187)*3=(51,146)- (51,146)*3=(210,10)- (210,10)*3=(167,164)- (167,164)*3=(107,218)- (107,218)*3=(174,112)- (174,112)*3=(131,110)- (131,110)*3=(67,22)- (67,22)*3=(32,177)- (32,177)*3=(92,54)- (92,54)*3=(51,95)- (51,95)*3=(210,231)- (210,231)*3=(167,77)- (167,77)*3=(107,23)- (107,23)*3=(174,129)- (174,129)*3=(131,131)- (131,131)*3=(67,219)- (67,219)*3=(32,64)
(    18,List((92,187), (51,146), (210,10), (167,164), (107,218), (174,112), (131,110), (67,22), (32,177), (92,54), (51,95), (210,231), (167,77), (107,23), (174,129), (131,131), (67,219), (32,64)))
  *3*****************************************3*
- (39,47)*3=(190,90)(
  *3 [,241,])- (190,90)*3=(147,135)- (147,135)*3=(204,98)- (204,98)*3=(98,24)- (98,24)*3=(49,224)- (49,224)*3=(165,55)- (165,55)*3=(206,130)- (206,130)*3=(122,142)- (122,142)*3=(39,194)- (39,194)*3=(190,151)- (190,151)*3=(147,106)- (147,106)*3=(204,143)- (204,143)*3=(98,217)- (98,217)*3=(49,17)- (49,17)*3=(165,186)- (165,186)*3=(206,111)- (206,111)*3=(122,99)- (122,99)*3=(39,47)
(    18,List((190,90), (147,135), (204,98), (98,24), (49,224), (165,55), (206,130), (122,142), (39,194), (190,151), (147,106), (204,143), (98,217), (49,17), (165,186), (206,111), (122,99), (39,47)))
  *3*****************************************3*
- (47,21)*3=(79,125)(
  *3 [,241,])- (79,125)*3=(209,16)- (209,16)*3=(72,118)- (72,118)*3=(155,190)- (155,190)*3=(201,178)- (201,178)*3=(109,25)- (109,25)*3=(48,170)- (48,170)*3=(149,58)- (149,58)*3=(47,220)- (47,220)*3=(79,116)- (79,116)*3=(209,225)- (209,225)*3=(72,123)- (72,123)*3=(155,51)- (155,51)*3=(201,63)- (201,63)*3=(109,216)- (109,216)*3=(48,71)- (48,71)*3=(149,183)- (149,183)*3=(47,21)
(    18,List((79,125), (209,16), (72,118), (155,190), (201,178), (109,25), (48,170), (149,58), (47,220), (79,116), (209,225), (72,123), (155,51), (201,63), (109,216), (48,71), (149,183), (47,21)))
  *3*****************************************3*
- (70,8)*3=(86,233)(
  *3 [,241,])- (86,233)*3=(85,8)- (85,8)*3=(70,233)- (70,233)*3=(86,8)- (86,8)*3=(85,233)- (85,233)*3=(70,8)
(    6,List((86,233), (85,8), (70,233), (86,8), (85,233), (70,8)))
(241,15,
  List((160,104), (87,154), (164,228), (162,81), (151,88), (6,114), (166,72), (163,226), (1,197), (160,137), (87,87), (164,13), (162,160), (151,153), (6,127), (166,169), (163,15), (1,44))
  List((116,118), (156,190), (123,178), (189,25), (238,170), (66,58), (223,220), (221,116), (2,225), (116,123), (156,51), (123,63), (189,216), (238,71), (66,183), (223,21), (221,125), (2,16))
  List((78,130), (217,142), (99,194), (93,151), (58,106), (110,143), (119,217), (180,17), (11,186), (78,111), (217,99), (99,47), (93,90), (58,135), (110,98), (119,24), (180,224), (11,55))
  List((65,186), (198,111), (143,99), (103,47), (199,90), (36,135), (168,98), (24,24), (12,224), (65,55), (198,130), (143,142), (103,194), (199,151), (36,106), (168,143), (24,217), (12,17))
  List((220,164), (216,218), (108,112), (73,110), (133,22), (211,177), (215,54), (148,95), (14,231), (220,77), (216,23), (108,129), (73,131), (133,219), (211,64), (215,187), (148,146), (14,10))
  List((231,104), (100,154), (50,228), (20,81), (96,88), (90,114), (80,72), (35,226), (15,197), (231,137), (100,87), (50,13), (20,160), (96,153), (90,127), (80,169), (35,15), (15,44))
  List((176,107), (232,240), (226,214), (76,134), (144,1), (240,27), (230,107), (106,240), (16,214), (176,134), (232,1), (226,27), (76,107), (144,240), (240,214), (230,134), (106,1), (16,27))
  List((95,164), (159,218), (200,112), (37,110), (41,22), (239,177), (175,54), (42,95), (17,231), (95,77), (159,23), (200,129), (37,131), (41,219), (239,64), (175,187), (42,146), (17,10))
  List((126,223), (185,70), (178,212), (153,18), (173,171), (44,29), (203,223), (124,70), (19,212), (126,18), (185,171), (178,29), (153,223), (173,70), (44,212), (203,18), (124,171), (19,29))
  List((212,220), (182,116), (30,225), (53,123), (171,51), (158,63), (184,216), (196,71), (26,183), (212,21), (182,125), (30,16), (53,118), (171,190), (158,178), (184,25), (196,170), (26,58))
  List((59,160), (235,153), (145,127), (236,169), (43,15), (225,44), (91,104), (54,154), (27,228), (59,81), (235,88), (145,114), (236,72), (43,226), (225,197), (91,137), (54,87), (27,13))
  List((92,187), (51,146), (210,10), (167,164), (107,218), (174,112), (131,110), (67,22), (32,177), (92,54), (51,95), (210,231), (167,77), (107,23), (174,129), (131,131), (67,219), (32,64))
  List((190,90), (147,135), (204,98), (98,24), (49,224), (165,55), (206,130), (122,142), (39,194), (190,151), (147,106), (204,143), (98,217), (49,17), (165,186), (206,111), (122,99), (39,47))
  List((79,125), (209,16), (72,118), (155,190), (201,178), (109,25), (48,170), (149,58), (47,220), (79,116), (209,225), (72,123), (155,51), (201,63), (109,216), (48,71), (149,183), (47,21))
  List((86,233), (85,8), (70,233), (86,8), (85,233), (70,8))
  )

***4*** 241 ***** 16 groupes pour les multiplications par 4
  *4*****************************************4*
_ (1,44)*4=(171,51)(
  *4 [,241,])_ (171,51)*4=(151,153)_ (151,153)*4=(212,220)_ (212,220)*4=(160,137)_ (160,137)*4=(158,178)_ (158,178)*4=(6,114)_ (6,114)*4=(182,125)_ (182,125)*4=(87,154)_ (87,154)*4=(184,216)_ (184,216)*4=(166,169)_ (166,169)*4=(30,225)_ (30,225)*4=(164,13)_ (164,13)*4=(196,170)_ (196,170)*4=(163,226)_ (163,226)*4=(53,118)_ (53,118)*4=(162,81)_ (162,81)*4=(26,183)_ (26,183)*4=(1,44)
(    18,List((171,51), (151,153), (212,220), (160,137), (158,178), (6,114), (182,125), (87,154), (184,216), (166,169), (30,225), (164,13), (196,170), (163,226), (53,118), (162,81), (26,183), (1,44)))
  *4*****************************************4*
_ (2,16)*4=(27,228)(
  *4 [,241,])_ (27,228)*4=(238,71)_ (238,71)*4=(43,15)_ (43,15)*4=(116,123)_ (116,123)*4=(59,160)_ (59,160)*4=(66,58)_ (66,58)*4=(225,197)_ (225,197)*4=(156,190)_ (156,190)*4=(235,88)_ (235,88)*4=(223,21)_ (223,21)*4=(91,104)_ (91,104)*4=(123,63)_ (123,63)*4=(145,127)_ (145,127)*4=(221,116)_ (221,116)*4=(54,87)_ (54,87)*4=(189,25)_ (189,25)*4=(236,72)_ (236,72)*4=(2,16)
(    18,List((27,228), (238,71), (43,15), (116,123), (59,160), (66,58), (225,197), (156,190), (235,88), (223,21), (91,104), (123,63), (145,127), (221,116), (54,87), (189,25), (236,72), (2,16)))
  *4*****************************************4*
_ (1,197)*4=(171,190)(
  *4 [,241,])_ (171,190)*4=(151,88)_ (151,88)*4=(212,21)_ (212,21)*4=(160,104)_ (160,104)*4=(158,63)_ (158,63)*4=(6,127)_ (6,127)*4=(182,116)_ (182,116)*4=(87,87)_ (87,87)*4=(184,25)_ (184,25)*4=(166,72)_ (166,72)*4=(30,16)_ (30,16)*4=(164,228)_ (164,228)*4=(196,71)_ (196,71)*4=(163,15)_ (163,15)*4=(53,123)_ (53,123)*4=(162,160)_ (162,160)*4=(26,58)_ (26,58)*4=(1,197)
(    18,List((171,190), (151,88), (212,21), (160,104), (158,63), (6,127), (182,116), (87,87), (184,25), (166,72), (30,16), (164,228), (196,71), (163,15), (53,123), (162,160), (26,58), (1,197)))
  *4*****************************************4*
_ (2,225)*4=(27,13)(
  *4 [,241,])_ (27,13)*4=(238,170)_ (238,170)*4=(43,226)_ (43,226)*4=(116,118)_ (116,118)*4=(59,81)_ (59,81)*4=(66,183)_ (66,183)*4=(225,44)_ (225,44)*4=(156,51)_ (156,51)*4=(235,153)_ (235,153)*4=(223,220)_ (223,220)*4=(91,137)_ (91,137)*4=(123,178)_ (123,178)*4=(145,114)_ (145,114)*4=(221,125)_ (221,125)*4=(54,154)_ (54,154)*4=(189,216)_ (189,216)*4=(236,169)_ (236,169)*4=(2,225)
(    18,List((27,13), (238,170), (43,226), (116,118), (59,81), (66,183), (225,44), (156,51), (235,153), (223,220), (91,137), (123,178), (145,114), (221,125), (54,154), (189,216), (236,169), (2,225)))
  *4*****************************************4*
_ (11,55)*4=(210,10)(
  *4 [,241,])_ (210,10)*4=(58,135)_ (58,135)*4=(67,219)_ (67,219)*4=(78,111)_ (78,111)*4=(167,77)_ (167,77)*4=(110,143)_ (110,143)*4=(32,177)_ (32,177)*4=(217,142)_ (217,142)*4=(107,218)_ (107,218)*4=(119,24)_ (119,24)*4=(92,187)_ (92,187)*4=(99,47)_ (99,47)*4=(174,129)_ (174,129)*4=(180,17)_ (180,17)*4=(51,95)_ (51,95)*4=(93,151)_ (93,151)*4=(131,110)_ (131,110)*4=(11,55)
(    18,List((210,10), (58,135), (67,219), (78,111), (167,77), (110,143), (32,177), (217,142), (107,218), (119,24), (92,187), (99,47), (174,129), (180,17), (51,95), (93,151), (131,110), (11,55)))
  *4*****************************************4*
_ (12,17)*4=(148,95)(
  *4 [,241,])_ (148,95)*4=(199,151)_ (199,151)*4=(73,110)_ (73,110)*4=(65,55)_ (65,55)*4=(14,10)_ (14,10)*4=(36,135)_ (36,135)*4=(133,219)_ (133,219)*4=(198,111)_ (198,111)*4=(220,77)_ (220,77)*4=(168,143)_ (168,143)*4=(211,177)_ (211,177)*4=(143,142)_ (143,142)*4=(216,218)_ (216,218)*4=(24,24)_ (24,24)*4=(215,187)_ (215,187)*4=(103,47)_ (103,47)*4=(108,129)_ (108,129)*4=(12,17)
(    18,List((148,95), (199,151), (73,110), (65,55), (14,10), (36,135), (133,219), (198,111), (220,77), (168,143), (211,177), (143,142), (216,218), (24,24), (215,187), (103,47), (108,129), (12,17)))
  *4*****************************************4*
_ (11,186)*4=(210,231)(
  *4 [,241,])_ (210,231)*4=(58,106)_ (58,106)*4=(67,22)_ (67,22)*4=(78,130)_ (78,130)*4=(167,164)_ (167,164)*4=(110,98)_ (110,98)*4=(32,64)_ (32,64)*4=(217,99)_ (217,99)*4=(107,23)_ (107,23)*4=(119,217)_ (119,217)*4=(92,54)_ (92,54)*4=(99,194)_ (99,194)*4=(174,112)_ (174,112)*4=(180,224)_ (180,224)*4=(51,146)_ (51,146)*4=(93,90)_ (93,90)*4=(131,131)_ (131,131)*4=(11,186)
(    18,List((210,231), (58,106), (67,22), (78,130), (167,164), (110,98), (32,64), (217,99), (107,23), (119,217), (92,54), (99,194), (174,112), (180,224), (51,146), (93,90), (131,131), (11,186)))
  *4*****************************************4*
_ (12,224)*4=(148,146)(
  *4 [,241,])_ (148,146)*4=(199,90)_ (199,90)*4=(73,131)_ (73,131)*4=(65,186)_ (65,186)*4=(14,231)_ (14,231)*4=(36,106)_ (36,106)*4=(133,22)_ (133,22)*4=(198,130)_ (198,130)*4=(220,164)_ (220,164)*4=(168,98)_ (168,98)*4=(211,64)_ (211,64)*4=(143,99)_ (143,99)*4=(216,23)_ (216,23)*4=(24,217)_ (24,217)*4=(215,54)_ (215,54)*4=(103,194)_ (103,194)*4=(108,112)_ (108,112)*4=(12,224)
(    18,List((148,146), (199,90), (73,131), (65,186), (14,231), (36,106), (133,22), (198,130), (220,164), (168,98), (211,64), (143,99), (216,23), (24,217), (215,54), (103,194), (108,112), (12,224)))
  *4*****************************************4*
_ (15,44)*4=(155,51)(
  *4 [,241,])_ (155,51)*4=(96,153)_ (96,153)*4=(47,220)_ (47,220)*4=(231,137)_ (231,137)*4=(201,178)_ (201,178)*4=(90,114)_ (90,114)*4=(79,125)_ (79,125)*4=(100,154)_ (100,154)*4=(109,216)_ (109,216)*4=(80,169)_ (80,169)*4=(209,225)_ (209,225)*4=(50,13)_ (50,13)*4=(48,170)_ (48,170)*4=(35,226)_ (35,226)*4=(72,118)_ (72,118)*4=(20,81)_ (20,81)*4=(149,183)_ (149,183)*4=(15,44)
(    18,List((155,51), (96,153), (47,220), (231,137), (201,178), (90,114), (79,125), (100,154), (109,216), (80,169), (209,225), (50,13), (48,170), (35,226), (72,118), (20,81), (149,183), (15,44)))
  *4*****************************************4*
_ (16,27)*4=(230,107)(
  *4 [,241,])_ (230,107)*4=(144,240)_ (144,240)*4=(226,214)_ (226,214)*4=(176,134)_ (176,134)*4=(106,1)_ (106,1)*4=(240,27)_ (240,27)*4=(76,107)_ (76,107)*4=(232,240)_ (232,240)*4=(16,214)_ (16,214)*4=(230,134)_ (230,134)*4=(144,1)_ (144,1)*4=(226,27)_ (226,27)*4=(176,107)_ (176,107)*4=(106,240)_ (106,240)*4=(240,214)_ (240,214)*4=(76,134)_ (76,134)*4=(232,1)_ (232,1)*4=(16,27)
(    18,List((230,107), (144,240), (226,214), (176,134), (106,1), (240,27), (76,107), (232,240), (16,214), (230,134), (144,1), (226,27), (176,107), (106,240), (240,214), (76,134), (232,1), (16,27)))
  *4*****************************************4*
_ (15,197)*4=(155,190)(
  *4 [,241,])_ (155,190)*4=(96,88)_ (96,88)*4=(47,21)_ (47,21)*4=(231,104)_ (231,104)*4=(201,63)_ (201,63)*4=(90,127)_ (90,127)*4=(79,116)_ (79,116)*4=(100,87)_ (100,87)*4=(109,25)_ (109,25)*4=(80,72)_ (80,72)*4=(209,16)_ (209,16)*4=(50,228)_ (50,228)*4=(48,71)_ (48,71)*4=(35,15)_ (35,15)*4=(72,123)_ (72,123)*4=(20,160)_ (20,160)*4=(149,58)_ (149,58)*4=(15,197)
(    18,List((155,190), (96,88), (47,21), (231,104), (201,63), (90,127), (79,116), (100,87), (109,25), (80,72), (209,16), (50,228), (48,71), (35,15), (72,123), (20,160), (149,58), (15,197)))
  *4*****************************************4*
_ (17,10)*4=(147,135)(
  *4 [,241,])_ (147,135)*4=(41,219)_ (41,219)*4=(206,111)_ (206,111)*4=(95,77)_ (95,77)*4=(204,143)_ (204,143)*4=(239,177)_ (239,177)*4=(122,142)_ (122,142)*4=(159,218)_ (159,218)*4=(98,24)_ (98,24)*4=(175,187)_ (175,187)*4=(39,47)_ (39,47)*4=(200,129)_ (200,129)*4=(49,17)_ (49,17)*4=(42,95)_ (42,95)*4=(190,151)_ (190,151)*4=(37,110)_ (37,110)*4=(165,55)_ (165,55)*4=(17,10)
(    18,List((147,135), (41,219), (206,111), (95,77), (204,143), (239,177), (122,142), (159,218), (98,24), (175,187), (39,47), (200,129), (49,17), (42,95), (190,151), (37,110), (165,55), (17,10)))
  *4*****************************************4*
_ (19,29)*4=(203,223)(
  *4 [,241,])_ (203,223)*4=(173,70)_ (173,70)*4=(178,212)_ (178,212)*4=(126,18)_ (126,18)*4=(124,171)_ (124,171)*4=(44,29)_ (44,29)*4=(153,223)_ (153,223)*4=(185,70)_ (185,70)*4=(19,212)_ (19,212)*4=(203,18)_ (203,18)*4=(173,171)_ (173,171)*4=(178,29)_ (178,29)*4=(126,223)_ (126,223)*4=(124,70)_ (124,70)*4=(44,212)_ (44,212)*4=(153,18)_ (153,18)*4=(185,171)_ (185,171)*4=(19,29)
(    18,List((203,223), (173,70), (178,212), (126,18), (124,171), (44,29), (153,223), (185,70), (19,212), (203,18), (173,171), (178,29), (126,223), (124,70), (44,212), (153,18), (185,171), (19,29)))
  *4*****************************************4*
_ (17,231)*4=(147,106)(
  *4 [,241,])_ (147,106)*4=(41,22)_ (41,22)*4=(206,130)_ (206,130)*4=(95,164)_ (95,164)*4=(204,98)_ (204,98)*4=(239,64)_ (239,64)*4=(122,99)_ (122,99)*4=(159,23)_ (159,23)*4=(98,217)_ (98,217)*4=(175,54)_ (175,54)*4=(39,194)_ (39,194)*4=(200,112)_ (200,112)*4=(49,224)_ (49,224)*4=(42,146)_ (42,146)*4=(190,90)_ (190,90)*4=(37,131)_ (37,131)*4=(165,186)_ (165,186)*4=(17,231)
(    18,List((147,106), (41,22), (206,130), (95,164), (204,98), (239,64), (122,99), (159,23), (98,217), (175,54), (39,194), (200,112), (49,224), (42,146), (190,90), (37,131), (165,186), (17,231)))
  *4*****************************************4*
_ (70,8)*4=(86,8)(
  *4 [,241,])_ (86,8)*4=(85,8)_ (85,8)*4=(70,8)
(    3,List((86,8), (85,8), (70,8)))
  *4*****************************************4*
_ (70,233)*4=(86,233)(
  *4 [,241,])_ (86,233)*4=(85,233)_ (85,233)*4=(70,233)
(    3,List((86,233), (85,233), (70,233)))
(241,16,
  List((171,51), (151,153), (212,220), (160,137), (158,178), (6,114), (182,125), (87,154), (184,216), (166,169), (30,225), (164,13), (196,170), (163,226), (53,118), (162,81), (26,183), (1,44))
  List((27,228), (238,71), (43,15), (116,123), (59,160), (66,58), (225,197), (156,190), (235,88), (223,21), (91,104), (123,63), (145,127), (221,116), (54,87), (189,25), (236,72), (2,16))
  List((171,190), (151,88), (212,21), (160,104), (158,63), (6,127), (182,116), (87,87), (184,25), (166,72), (30,16), (164,228), (196,71), (163,15), (53,123), (162,160), (26,58), (1,197))
  List((27,13), (238,170), (43,226), (116,118), (59,81), (66,183), (225,44), (156,51), (235,153), (223,220), (91,137), (123,178), (145,114), (221,125), (54,154), (189,216), (236,169), (2,225))
  List((210,10), (58,135), (67,219), (78,111), (167,77), (110,143), (32,177), (217,142), (107,218), (119,24), (92,187), (99,47), (174,129), (180,17), (51,95), (93,151), (131,110), (11,55))
  List((148,95), (199,151), (73,110), (65,55), (14,10), (36,135), (133,219), (198,111), (220,77), (168,143), (211,177), (143,142), (216,218), (24,24), (215,187), (103,47), (108,129), (12,17))
  List((210,231), (58,106), (67,22), (78,130), (167,164), (110,98), (32,64), (217,99), (107,23), (119,217), (92,54), (99,194), (174,112), (180,224), (51,146), (93,90), (131,131), (11,186))
  List((148,146), (199,90), (73,131), (65,186), (14,231), (36,106), (133,22), (198,130), (220,164), (168,98), (211,64), (143,99), (216,23), (24,217), (215,54), (103,194), (108,112), (12,224))
  List((155,51), (96,153), (47,220), (231,137), (201,178), (90,114), (79,125), (100,154), (109,216), (80,169), (209,225), (50,13), (48,170), (35,226), (72,118), (20,81), (149,183), (15,44))
  List((230,107), (144,240), (226,214), (176,134), (106,1), (240,27), (76,107), (232,240), (16,214), (230,134), (144,1), (226,27), (176,107), (106,240), (240,214), (76,134), (232,1), (16,27))
  List((155,190), (96,88), (47,21), (231,104), (201,63), (90,127), (79,116), (100,87), (109,25), (80,72), (209,16), (50,228), (48,71), (35,15), (72,123), (20,160), (149,58), (15,197))
  List((147,135), (41,219), (206,111), (95,77), (204,143), (239,177), (122,142), (159,218), (98,24), (175,187), (39,47), (200,129), (49,17), (42,95), (190,151), (37,110), (165,55), (17,10))
  List((203,223), (173,70), (178,212), (126,18), (124,171), (44,29), (153,223), (185,70), (19,212), (203,18), (173,171), (178,29), (126,223), (124,70), (44,212), (153,18), (185,171), (19,29))
  List((147,106), (41,22), (206,130), (95,164), (204,98), (239,64), (122,99), (159,23), (98,217), (175,54), (39,194), (200,112), (49,224), (42,146), (190,90), (37,131), (165,186), (17,231))
  List((86,8), (85,8), (70,8))
  List((86,233), (85,233), (70,233))
  )
Ordre67: ils ont tous le meme ordre! 79
(67,78,List((2,22), (2,45), (4,2), (4,65), (5,20), (5,47), (6,25), (6,42), (7,22), (7,45), (11,20), (11,47), (12,23), (12,44), (13,23), (13,44), (14,2), (14,65), (16,4), (16,63), (17,30), (17,37), (18,12), (18,55), (21,25), (21,42), (23,28), (23,39), (24,30), (24,37), (25,17), (25,50), (26,30), (26,37), (27,27), (27,40), (30,26), (30,41), (34,7), (34,60), (38,26), (38,41), (40,25), (40,42), (42,23), (42,44), (46,27), (46,40), (47,28), (47,39), (48,7), (48,60), (49,2), (49,65), (51,20), (51,47), (52,7), (52,60), (53,12), (53,55), (54,17), (54,50), (55,17), (55,50), (56,4), (56,63), (58,22), (58,45), (61,27), (61,40), (62,4), (62,63), (63,12), (63,55), (64,28), (64,39), (66,26), (66,41)))
(===,(2,22),77,(0,0),===)
(===,(2,45),77,(0,0),===)
(===,(4,2),77,(0,0),===)
(===,(4,65),77,(0,0),===)
(===,(5,20),77,(0,0),===)
(===,(5,47),77,(0,0),===)
(===,(6,25),77,(0,0),===)
(===,(6,42),77,(0,0),===)
(===,(7,22),77,(0,0),===)
(===,(7,45),77,(0,0),===)
(===,(11,20),77,(0,0),===)
(===,(11,47),77,(0,0),===)
(===,(12,23),77,(0,0),===)
(===,(12,44),77,(0,0),===)
(===,(13,23),77,(0,0),===)
(===,(13,44),77,(0,0),===)
(===,(14,2),77,(0,0),===)
(===,(14,65),77,(0,0),===)
(===,(16,4),77,(0,0),===)
(===,(16,63),77,(0,0),===)
(===,(17,30),77,(0,0),===)
(===,(17,37),77,(0,0),===)
(===,(18,12),77,(0,0),===)
(===,(18,55),77,(0,0),===)
(===,(21,25),77,(0,0),===)
(===,(21,42),77,(0,0),===)
(===,(23,28),77,(0,0),===)
(===,(23,39),77,(0,0),===)
(===,(24,30),77,(0,0),===)
(===,(24,37),77,(0,0),===)
(===,(25,17),77,(0,0),===)
(===,(25,50),77,(0,0),===)
(===,(26,30),77,(0,0),===)
(===,(26,37),77,(0,0),===)
(===,(27,27),77,(0,0),===)
(===,(27,40),77,(0,0),===)
(===,(30,26),77,(0,0),===)
(===,(30,41),77,(0,0),===)
(===,(34,7),77,(0,0),===)
(===,(34,60),77,(0,0),===)
(===,(38,26),77,(0,0),===)
(===,(38,41),77,(0,0),===)
(===,(40,25),77,(0,0),===)
(===,(40,42),77,(0,0),===)
(===,(42,23),77,(0,0),===)
(===,(42,44),77,(0,0),===)
(===,(46,27),77,(0,0),===)
(===,(46,40),77,(0,0),===)
(===,(47,28),77,(0,0),===)
(===,(47,39),77,(0,0),===)
(===,(48,7),77,(0,0),===)
(===,(48,60),77,(0,0),===)
(===,(49,2),77,(0,0),===)
(===,(49,65),77,(0,0),===)
(===,(51,20),77,(0,0),===)
(===,(51,47),77,(0,0),===)
(===,(52,7),77,(0,0),===)
(===,(52,60),77,(0,0),===)
(===,(53,12),77,(0,0),===)
(===,(53,55),77,(0,0),===)
(===,(54,17),77,(0,0),===)
(===,(54,50),77,(0,0),===)
(===,(55,17),77,(0,0),===)
(===,(55,50),77,(0,0),===)
(===,(56,4),77,(0,0),===)
(===,(56,63),77,(0,0),===)
(===,(58,22),77,(0,0),===)
(===,(58,45),77,(0,0),===)
(===,(61,27),77,(0,0),===)
(===,(61,40),77,(0,0),===)
(===,(62,4),77,(0,0),===)
(===,(62,63),77,(0,0),===)
(===,(63,12),77,(0,0),===)
(===,(63,55),77,(0,0),===)
(===,(64,28),77,(0,0),===)
(===,(64,39),77,(0,0),===)
(===,(66,26),77,(0,0),===)
(===,(66,41),77,(0,0),===)
y2 = x3 + 0x + 7  Ordre 241: ils ont tous le meme ordre!
(241,258,List((1,44), (1,197), (2,16), (2,225), (6,114), (6,127), (11,55), (11,186), (12,17), (12,224), (14,10), (14,231), (15,44), (15,197), (16,27), (16,214), (17,10), (17,231), (19,29), (19,212), (20,81), (20,160), (24,24), (24,217), (26,58), (26,183), (27,13), (27,228), (30,16), (30,225), (32,64), (32,177), (35,15), (35,226), (36,106), (36,135), (37,110), (37,131), (39,47), (39,194), (41,22), (41,219), (42,95), (42,146), (43,15), (43,226), (44,29), (44,212), (47,21), (47,220), (48,71), (48,170), (49,17), (49,224), (50,13), (50,228), (51,95), (51,146), (53,118), (53,123), (54,87), (54,154), (58,106), (58,135), (59,81), (59,160), (65,55), (65,186), (66,58), (66,183), (67,22), (67,219), (70,8), (70,233), (72,118), (72,123), (73,110), (73,131), (76,107), (76,134), (78,111), (78,130), (79,116), (79,125), (80,72), (80,169), (85,8), (85,233), (86,8), (86,233), (87,87), (87,154), (90,114), (90,127), (91,104), (91,137), (92,54), (92,187), (93,90), (93,151), (95,77), (95,164), (96,88), (96,153), (98,24), (98,217), (99,47), (99,194), (100,87), (100,154), (103,47), (103,194), (106,1), (106,240), (107,23), (107,218), (108,112), (108,129), (109,25), (109,216), (110,98), (110,143), (116,118), (116,123), (119,24), (119,217), (122,99), (122,142), (123,63), (123,178), (124,70), (124,171), (126,18), (126,223), (131,110), (131,131), (133,22), (133,219), (143,99), (143,142), (144,1), (144,240), (145,114), (145,127), (147,106), (147,135), (148,95), (148,146), (149,58), (149,183), (151,88), (151,153), (153,18), (153,223), (155,51), (155,190), (156,51), (156,190), (158,63), (158,178), (159,23), (159,218), (160,104), (160,137), (162,81), (162,160), (163,15), (163,226), (164,13), (164,228), (165,55), (165,186), (166,72), (166,169), (167,77), (167,164), (168,98), (168,143), (171,51), (171,190), (173,70), (173,171), (174,112), (174,129), (175,54), (175,187), (176,107), (176,134), (178,29), (178,212), (180,17), (180,224), (182,116), (182,125), (184,25), (184,216), (185,70), (185,171), (189,25), (189,216), (190,90), (190,151), (196,71), (196,170), (198,111), (198,130), (199,90), (199,151), (200,112), (200,129), (201,63), (201,178), (203,18), (203,223), (204,98), (204,143), (206,111), (206,130), (209,16), (209,225), (210,10), (210,231), (211,64), (211,177), (212,21), (212,220), (215,54), (215,187), (216,23), (216,218), (217,99), (217,142), (220,77), (220,164), (221,116), (221,125), (223,21), (223,220), (225,44), (225,197), (226,27), (226,214), (230,107), (230,134), (231,104), (231,137), (232,1), (232,240), (235,88), (235,153), (236,72), (236,169), (238,71), (238,170), (239,64), (239,177), (240,27), (240,214)))
(241,258,liste_des_ordres_non_egaux_a_la_taille_de_la_courbe,List(((16,27),37), ((16,214),37), ((19,29),37), ((19,212),37), ((44,29),37), ((44,212),37), ((70,8),7), ((70,233),7), ((76,107),37), ((76,134),37), ((85,8),7), ((85,233),7), ((86,8),7), ((86,233),7), ((106,1),37), ((106,240),37), ((124,70),37), ((124,171),37), ((126,18),37), ((126,223),37), ((144,1),37), ((144,240),37), ((153,18),37), ((153,223),37), ((173,70),37), ((173,171),37), ((176,107),37), ((176,134),37), ((178,29),37), ((178,212),37), ((185,70),37), ((185,171),37), ((203,18),37), ((203,223),37), ((226,27),37), ((226,214),37), ((230,107),37), ((230,134),37), ((232,1),37), ((232,240),37), ((240,27),37), ((240,214),37)))
Trouve les nombres premiers qui pourraient marcher pour y2 = x3 + 3x + 5
  e.curve.size > modlo & e.curve.filter(p => p._1 * p._2 == 0).isEmpty
     false --- e.curve.size 2 > modlo 2& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,1))
     false --- e.curve.size 3 > modlo 3& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((1,0))
     false --- e.curve.size 9 > modlo 5& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,0))
     false --- e.curve.size 6 > modlo 7& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 8 > modlo 11& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,4), (0,7))
     false --- e.curve.size 8 > modlo 13& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     true --- e.curve.size 22 > modlo 17& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 25 > modlo 19& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,9), (0,10), (2,0))
     false --- e.curve.size 27 > modlo 23& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((10,0))
     false --- e.curve.size 28 > modlo 29& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,11), (0,18), (5,0), (12,0))
     false --- e.curve.size 37 > modlo 31& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,6), (0,25), (28,0))
     false --- e.curve.size 47 > modlo 37& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((11,0))
     false --- e.curve.size 43 > modlo 41& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,13), (0,28), (3,0), (7,0), (31,0))
     false --- e.curve.size 45 > modlo 43& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((18,0))
     true --- e.curve.size 60 > modlo 47& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 51 > modlo 53& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((27,0))
     false --- e.curve.size 65 > modlo 59& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,8), (0,51), (51,0))
     false --- e.curve.size 69 > modlo 61& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,26), (0,35), (12,0))
     false --- e.curve.size 52 > modlo 67& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 61 > modlo 71& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,17), (0,54), (67,0))
     false --- e.curve.size 69 > modlo 73& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((48,0))
     false --- e.curve.size 79 > modlo 79& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,20), (0,59), (28,0))
     false --- e.curve.size 75 > modlo 83& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((13,0))
     false --- e.curve.size 88 > modlo 89& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,19), (0,70))
     false --- e.curve.size 99 > modlo 97& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((84,0))
     false --- e.curve.size 114 > modlo 101& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,45), (0,56))
     false --- e.curve.size 95 > modlo 103& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((53,0), (64,0), (89,0))
     false --- e.curve.size 123 > modlo 107& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((71,0))
     false --- e.curve.size 110 > modlo 109& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,21), (0,88))
     true --- e.curve.size 122 > modlo 113& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 131 > modlo 127& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((38,0))
     false --- e.curve.size 116 > modlo 131& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,23), (0,108))
     false --- e.curve.size 131 > modlo 137& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((15,0), (18,0), (104,0))
     false --- e.curve.size 138 > modlo 139& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,12), (0,127))
     false --- e.curve.size 125 > modlo 149& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,68), (0,81), (111,0))
     false --- e.curve.size 167 > modlo 151& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,55), (0,96), (34,0), (128,0), (140,0))
     false --- e.curve.size 169 > modlo 157& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((67,0))
     false --- e.curve.size 157 > modlo 163& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((109,0))
     false --- e.curve.size 165 > modlo 167& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((89,0))
     false --- e.curve.size 167 > modlo 173& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((66,0))
     false --- e.curve.size 163 > modlo 179& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,30), (0,149), (159,0))
     false --- e.curve.size 192 > modlo 181& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,27), (0,154))
     false --- e.curve.size 207 > modlo 191& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,14), (0,177), (104,0), (122,0), (156,0))
     false --- e.curve.size 209 > modlo 193& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((156,0))
     false --- e.curve.size 215 > modlo 197& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((132,0))
     false --- e.curve.size 224 > modlo 199& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,76), (0,123))
     false --- e.curve.size 187 > modlo 211& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,65), (0,146), (88,0))
     true --- e.curve.size 228 > modlo 223& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 203 > modlo 227& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((148,0))
     false --- e.curve.size 231 > modlo 229& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,66), (0,163), (223,0))
     false --- e.curve.size 247 > modlo 233& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((127,0))
     false --- e.curve.size 233 > modlo 239& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,31), (0,208), (6,0))
     false --- e.curve.size 266 > modlo 241& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,103), (0,138))
     false --- e.curve.size 224 > modlo 251& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,16), (0,235))
     false --- e.curve.size 249 > modlo 257& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((122,0))
     false --- e.curve.size 275 > modlo 263& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((70,0), (226,0), (230,0))
     false --- e.curve.size 266 > modlo 269& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,126), (0,143))
     false --- e.curve.size 257 > modlo 271& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,33), (0,238), (203,0))
     false --- e.curve.size 258 > modlo 277& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 293 > modlo 281& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,75), (0,206), (97,0))
     false --- e.curve.size 279 > modlo 283& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((54,0), (64,0), (165,0))
     false --- e.curve.size 268 > modlo 293& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 305 > modlo 307& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((206,0))
     false --- e.curve.size 336 > modlo 311& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,117), (0,194))
     false --- e.curve.size 292 > modlo 313& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 308 > modlo 317& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 345 > modlo 331& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,98), (0,233), (272,0))
     false --- e.curve.size 333 > modlo 337& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((95,0))
     false --- e.curve.size 321 > modlo 347& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((238,0))
     false --- e.curve.size 343 > modlo 349& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,62), (0,287), (25,0), (59,0), (265,0))
     false --- e.curve.size 327 > modlo 353& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((164,0))
     false --- e.curve.size 343 > modlo 359& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,148), (0,211), (88,0), (278,0), (352,0))
     false --- e.curve.size 345 > modlo 367& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((252,0))
     false --- e.curve.size 403 > modlo 373& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((27,0), (74,0), (272,0))
     false --- e.curve.size 359 > modlo 379& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,39), (0,340), (234,0))
     false --- e.curve.size 367 > modlo 383& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((248,0))
     false --- e.curve.size 416 > modlo 389& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,86), (0,303))
     false --- e.curve.size 411 > modlo 397& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((22,0), (130,0), (245,0))
     false --- e.curve.size 401 > modlo 401& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,178), (0,223), (180,0))
     false --- e.curve.size 421 > modlo 409& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,150), (0,259), (149,0))
     false --- e.curve.size 427 > modlo 419& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,41), (0,378), (266,0))
     false --- e.curve.size 395 > modlo 421& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,200), (0,221), (123,0))
     false --- e.curve.size 457 > modlo 431& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,181), (0,250), (153,0))
     false --- e.curve.size 437 > modlo 433& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((38,0))
     false --- e.curve.size 464 > modlo 439& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,139), (0,300))
     false --- e.curve.size 426 > modlo 443& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 466 > modlo 449& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,118), (0,331))
     false --- e.curve.size 420 > modlo 457& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 475 > modlo 461& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,43), (0,418), (16,0), (87,0), (358,0))
     true --- e.curve.size 468 > modlo 463& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 479 > modlo 467& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((93,0), (137,0), (237,0))
     false --- e.curve.size 471 > modlo 479& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,22), (0,457), (128,0), (375,0), (455,0))
     false --- e.curve.size 479 > modlo 487& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((230,0), (356,0), (388,0))
     false --- e.curve.size 479 > modlo 491& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,147), (0,344), (21,0), (101,0), (369,0))
     false --- e.curve.size 474 > modlo 499& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,50), (0,449))
     false --- e.curve.size 492 > modlo 503& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 491 > modlo 509& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,243), (0,266), (95,0))
     false --- e.curve.size 559 > modlo 521& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,199), (0,322), (154,0))
     true --- e.curve.size 550 > modlo 523& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList()
     false --- e.curve.size 573 > modlo 541& e.curve.filter(p => p._1 * p._2 == 0).isEmptyList((0,196), (0,345), (8,0))
(y2 = x3 + 3x + 5,TreeSet(17, 47, 113, 223, 463, 523))
y2 = x3 + 3x + 5  Ordre 223: ils ont tous le meme ordre!
(223,228,List((1,3), (1,220), (2,58), (2,165), (3,34), (3,189), (4,9), (4,214), (6,4), (6,219), (7,102), (7,121), (10,84), (10,139), (11,37), (11,186), (14,28), (14,195), (16,71), (16,152), (17,78), (17,145), (19,30), (19,193), (20,86), (20,137), (22,98), (22,125), (23,83), (23,140), (30,104), (30,119), (31,26), (31,197), (33,19), (33,204), (35,13), (35,210), (36,88), (36,135), (37,51), (37,172), (38,53), (38,170), (40,74), (40,149), (42,39), (42,184), (43,91), (43,132), (44,71), (44,152), (45,110), (45,113), (46,52), (46,171), (48,53), (48,170), (51,74), (51,149), (52,111), (52,112), (56,43), (56,180), (57,111), (57,112), (58,101), (58,122), (59,63), (59,160), (60,105), (60,118), (62,32), (62,191), (65,85), (65,138), (66,67), (66,156), (68,65), (68,158), (69,58), (69,165), (70,45), (70,178), (73,38), (73,185), (74,86), (74,137), (77,43), (77,180), (80,56), (80,167), (84,2), (84,221), (86,10), (86,213), (88,91), (88,132), (89,28), (89,195), (90,43), (90,180), (91,46), (91,177), (92,91), (92,132), (94,14), (94,209), (95,26), (95,197), (97,26), (97,197), (99,95), (99,128), (101,55), (101,168), (102,40), (102,183), (104,102), (104,121), (106,96), (106,127), (109,20), (109,203), (110,5), (110,218), (112,102), (112,121), (114,111), (114,112), (120,28), (120,195), (123,23), (123,200), (124,103), (124,120), (125,5), (125,218), (127,108), (127,115), (129,86), (129,137), (131,42), (131,181), (132,74), (132,149), (135,42), (135,181), (137,53), (137,170), (138,92), (138,131), (149,14), (149,209), (150,57), (150,166), (151,17), (151,206), (152,58), (152,165), (158,12), (158,211), (161,18), (161,205), (162,69), (162,154), (163,71), (163,152), (164,72), (164,151), (166,20), (166,203), (170,80), (170,143), (171,20), (171,203), (172,46), (172,177), (173,36), (173,187), (175,10), (175,213), (178,93), (178,130), (179,105), (179,118), (180,42), (180,181), (181,75), (181,148), (183,46), (183,177), (184,35), (184,188), (185,10), (185,213), (188,8), (188,215), (193,11), (193,212), (198,19), (198,204), (200,82), (200,141), (201,21), (201,202), (202,50), (202,173), (203,14), (203,209), (204,15), (204,208), (207,105), (207,118), (208,61), (208,162), (211,5), (211,218), (212,47), (212,176), (215,19), (215,204), (217,70), (217,153), (219,44), (219,179), (222,1), (222,222)))
(223,228,liste_des_ordres_non_egaux_a_la_taille_de_la_courbe,List())

y2 = x3 + 0x + 7  Ordre 67: ils ont tous le meme ordre!
(67,78,List((2,22), (2,45), (4,2), (4,65), (5,20), (5,47), (6,25), (6,42), (7,22), (7,45), (11,20), (11,47), (12,23), (12,44), (13,23), (13,44), (14,2), (14,65), (16,4), (16,63), (17,30), (17,37), (18,12), (18,55), (21,25), (21,42), (23,28), (23,39), (24,30), (24,37), (25,17), (25,50), (26,30), (26,37), (27,27), (27,40), (30,26), (30,41), (34,7), (34,60), (38,26), (38,41), (40,25), (40,42), (42,23), (42,44), (46,27), (46,40), (47,28), (47,39), (48,7), (48,60), (49,2), (49,65), (51,20), (51,47), (52,7), (52,60), (53,12), (53,55), (54,17), (54,50), (55,17), (55,50), (56,4), (56,63), (58,22), (58,45), (61,27), (61,40), (62,4), (62,63), (63,12), (63,55), (64,28), (64,39), (66,26), (66,41)))
(67,78,liste_des_ordres_non_egaux_a_la_taille_de_la_courbe,List())
(loopsum , p (2,22), ordre 79, plus(p, p )(52,7), plus(plus(p, p), p) (62,63), lsum ,List((62,63), (25,17), (46,40), (11,20), (16,63), (21,42), (13,44), (56,4), (24,30), (14,65), (55,17), (5,20), (53,12), (26,30), (54,50), (66,26), (38,26), (51,47), (12,44), (23,39), (58,22), (7,45), (47,39), (6,42), (17,37), (49,65), (63,12), (42,23), (48,7), (64,39), (34,60), (40,25), (18,12), (61,40), (30,41), (27,40), (4,65), (4,2), (27,27), (30,26), (61,27), (18,55), (40,42), (34,7), (64,28), (48,60), (42,44), (63,55), (49,2), (17,30), (6,25), (47,28), (7,22), (58,45), (23,28), (12,23), (51,20), (38,41), (66,41), (54,17), (26,37), (53,55), (5,47), (55,50), (14,2), (24,37), (56,63), (13,23), (21,25), (16,4), (11,47), (46,27), (25,50), (62,4), (52,60), (2,45), (0,0)))

y2 = x3 + 0x + 7  Ordre 73: ils n'ont pas tous le meme ordre!
(73,63,List((1,9), (1,64), (4,12), (4,61), (6,2), (6,71), (8,9), (8,64), (9,15), (9,58), (11,30), (11,43), (14,14), (14,59), (15,30), (15,43), (18,27), (18,46), (19,2), (19,71), (20,14), (20,59), (21,17), (21,56), (22,17), (22,56), (30,17), (30,56), (32,12), (32,61), (34,16), (34,57), (36,4), (36,69), (37,12), (37,61), (39,14), (39,59), (41,4), (41,69), (42,0), (44,0), (47,30), (47,43), (48,2), (48,71), (53,16), (53,57), (57,27), (57,46), (59,16), (59,57), (60,0), (64,9), (64,64), (65,15), (65,58), (69,4), (69,69), (71,27), (71,46), (72,15), (72,58)))
(73,63,liste_des_ordres_non_egaux_a_la_taille_de_la_courbe,List(((1,9),8), ((1,64),8), ((4,12),8), ((4,61),8), ((6,2),4), ((6,71),4), ((8,9),8), ((8,64),8), ((9,15),8), ((9,58),8), ((11,30),8), ((11,43),8), ((14,14),8), ((14,59),8), ((15,30),8), ((15,43),8), ((18,27),8), ((18,46),8), ((19,2),4), ((19,71),4), ((20,14),8), ((20,59),8), ((21,17),8), ((21,56),8), ((22,17),8), ((22,56),8), ((30,17),8), ((30,56),8), ((32,12),8), ((32,61),8), ((34,16),8), ((34,57),8), ((36,4),4), ((36,69),4), ((37,12),8), ((37,61),8), ((39,14),8), ((39,59),8), ((41,4),4), ((41,69),4), ((42,0),4), ((44,0),4), ((47,30),8), ((47,43),8), ((48,2),4), ((48,71),4), ((53,16),8), ((53,57),8), ((57,27),8), ((57,46),8), ((59,16),8), ((59,57),8), ((60,0),4), ((64,9),8), ((64,64),8), ((65,15),8), ((65,58),8), ((69,4),4), ((69,69),4), ((71,27),8), ((71,46),8), ((72,15),8), ((72,58),8)))
(loopsum , p (1,9), ordre 8, plus(p, p )(69,4), plus(plus(p, p), p) (4,61), lsum ,List((4,61), (44,0), (4,12), (69,69), (1,64), (0,0)))
((1,9)+(1,9),(69,4))
(
------------------------
,(6,2),(60,0),(6,71),(0,0))

Process finished with exit code 0

