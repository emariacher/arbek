/* Generated By:JavaCC: Do not edit this line. BuildRelease.java */
import java.util.*;
import java.io.*;
import java.io.Reader.*;
import javax.swing.*;

public class BuildRelease extends Thread implements DefVar, BuildReleaseConstants {
  SeapineReleaseNote x;
  String file;
  String mainline;
  String ttprocfgname;
  String serveripport;
  String userid;
  String pwd;
  JTextArea err;
  SeapineBuildReleaseTool zt;

  public void run() {
    try {
      // ANALYZE
      x.seapine.knowPath(file);
      x.initLogFiles();
      x.buildChildListsXmltag();
      x.getLabelName(mainline);
      x.buildListsV1Files();
      x.buildSeapineScript(zt.branch.getText());
      x.buildReleaseNote();
      x.seapine.buildFiles4Bat(ttprocfgname, serveripport, false);
            zt.enableBuildButton();
      zt.AnalyzeLabel.setText("Analyzed!");

      while(!zt.goBuild) sleep(1000);
      myPrintln("Building");

      // BUILD
      x.seapine.buildFiles4Bat(ttprocfgname, serveripport, true);
      x.seapine.executeBat(userid, pwd);
      zt.BuildLabel.setText("Built!");
      x.closeLogFiles();
    } catch (Exception e) {
      zt.BuildLabel.setText("*******Errors: not Built!********");
          try {
      PipedInputStream piErr = new PipedInputStream();
      PipedOutputStream poErr = new PipedOutputStream(piErr);
      System.setErr(new PrintStream(poErr, true));
        e.printStackTrace();
      myErrPrintln(e.toString());
        int len=0;
        byte[] buf  = new byte[1024];
        while (true) {
            len = piErr.read(buf);
          if (len == -1) {
            break;
          }
          err.append(new String(buf, 0, len));
        }

           } catch (Exception ze) {}
   } finally {

    }
  }

  public BuildRelease(SeapineBuildReleaseTool zt) throws ParseException {
    this.zt=zt;
    x = new SeapineReleaseNote(zt);
    this.mainline=zt.mainline.getText();
    this.ttprocfgname=zt.TTProDBName.getText();
    this.serveripport=zt.server;
    this.userid=zt.username.getText();
    this.pwd=zt.pwd.getText();
    this.err=zt.err;
    try {
      this.file=zt.file.getCanonicalPath();
      BuildRelease parser1 = new BuildRelease(new FileInputStream(new File(file))); // old javacc

      // PARSE...
      parser1.zinput(x);
     } catch (Exception e) {
       e.printStackTrace();
       throw new ParseException();
    }
    start();
  }

  void myPrint(String s) throws Exception {
    x.seapine.f.writeFile(x.logfile, s);
    System.out.print(s);
  }
  void myPrintln(String s) throws Exception {
    myPrint(s + "\n");
  }

  void myErrPrint(String s) throws Exception {
    x.seapine.f.writeFile(x.errfile, s);
    err.append(s);
    System.out.print(s);
  }
  void myErrPrintln(String s) throws Exception {
    myErrPrint(s + "\n");
  }

  static final public void xmlItem(XmlTag xt) throws ParseException {
                            XmlTag xt2 = new XmlTag(xt);
    if (jj_2_1(2)) {
      cdata(xt);
    } else if (jj_2_2(2)) {
      notag(xt);
    } else if (jj_2_3(20)) {
      btag(xt);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case TAG_START:
        case CDATA_START:
        case PCDATA:
        case PCDATA_QS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        xmlItem(xt2);
                    xt.addChild(xt2); xt2 = new XmlTag(xt);
      }
      etag();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAG_START:
        bstag(xt);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void cdata(XmlTag xt) throws ParseException {
                          Token t; StringBuffer sb = new StringBuffer();
    jj_consume_token(CDATA_START);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLOSING:
      case CDATA_EOL:
      case CDATA_WORD:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CDATA_WORD:
        t = jj_consume_token(CDATA_WORD);
        break;
      case CDATA_EOL:
        t = jj_consume_token(CDATA_EOL);
        break;
      case CLOSING:
        t = jj_consume_token(CLOSING);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                       sb.append(t.toString());
    }
    jj_consume_token(CDATA_END);
                xt.addCdata(sb.toString());
  }

  static final public String tag_name() throws ParseException {
                      Token t;
    t = jj_consume_token(TAG_NAME);
                 {if (true) return t.toString().trim();}
    throw new Error("Missing return statement in function");
  }

  static final public XmlAttribute attribute() throws ParseException {
                             Token t; XmlAttribute a = new XmlAttribute();
    t = jj_consume_token(ATTR_NAME);
                  a.name = new String(t.toString());
    jj_consume_token(ATTR_EQ);
    t = jj_consume_token(ATTR_VAL);
                 a.value = new String(a.unquote(t.toString())); {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public void btag(XmlTag xt) throws ParseException {
                         XmlAttribute a; String tn;
    jj_consume_token(TAG_START);
    tn = tag_name();
                  xt.name(tn);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR_NAME:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      a = attribute();
                    xt.addAttribute(a);
    }
    jj_consume_token(TAG_END);
  }

  static final public void bstag(XmlTag xt) throws ParseException {
                          XmlAttribute a; String tn;
    jj_consume_token(TAG_START);
    tn = tag_name();
                  xt.name(tn);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR_NAME:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      a = attribute();
                    xt.addAttribute(a);
    }
    jj_consume_token(TAG_SLASHEND);
  }

  static final public void etag() throws ParseException {
    jj_consume_token(ENDTAG_START);
    jj_consume_token(TAG_NAME);
    jj_consume_token(TAG_END);
  }

  static final public void notag(XmlTag xt) throws ParseException {
                          Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PCDATA:
      t = jj_consume_token(PCDATA);
      break;
    case PCDATA_QS:
      t = jj_consume_token(PCDATA_QS);
      break;
    case EOL:
      t = jj_consume_token(EOL);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                              xt.parent.addNoTag(t.toString());
  }

  static final public void xmlcom(XmlTag xt) throws ParseException {
                           Token t; StringBuffer sb = new StringBuffer();
    jj_consume_token(COMMENT_START);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT_WORD:
        t = jj_consume_token(COMMENT_WORD);
        break;
      case COMMENT_EOL:
        t = jj_consume_token(COMMENT_EOL);
        break;
      case DASH:
        t = jj_consume_token(DASH);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                        sb.append(t.toString());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DASH:
      case COMMENT_EOL:
      case COMMENT_WORD:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(COMMENT_END);
                  xt.addXmlCom(sb.toString());
  }

  static final public void doctype(XmlTag xt) throws ParseException {
                            Token t; StringBuffer sb = new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCTYPE_START:
      jj_consume_token(DOCTYPE_START);
      break;
    case DECL_START:
      jj_consume_token(DECL_START);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      t = jj_consume_token(DOCTYPE_WORD);
                           sb.append(t.toString());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCTYPE_WORD:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOCTYPE_END:
      jj_consume_token(DOCTYPE_END);
      break;
    case DECL_END:
      jj_consume_token(DECL_END);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                   xt.addDocType(sb.toString());
  }

  static final public void zinput(XmlTag xt) throws ParseException {
                           XmlTag xt2 = new XmlTag(xt);
    label_7:
    while (true) {
      if (jj_2_4(2)) {
        xmlcom(xt);
      } else if (jj_2_5(2)) {
        doctype(xt);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case TAG_START:
        case CDATA_START:
        case PCDATA:
        case PCDATA_QS:
          xmlItem(xt2);
                     xt.addChild(xt2); xt2 = new XmlTag(xt);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case TAG_START:
      case COMMENT_START:
      case DOCTYPE_START:
      case DECL_START:
      case CDATA_START:
      case PCDATA:
      case PCDATA_QS:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(0);
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    return false;
  }

  static final private boolean jj_3R_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_13() {
    if (jj_scan_token(COMMENT_START)) return true;
    Token xsp;
    if (jj_3R_19()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_scan_token(ENDTAG_START)) return true;
    if (jj_scan_token(TAG_NAME)) return true;
    if (jj_scan_token(TAG_END)) return true;
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_scan_token(TAG_START)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TAG_SLASHEND)) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_10() {
    if (jj_scan_token(TAG_START)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TAG_END)) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_scan_token(ATTR_NAME)) return true;
    if (jj_scan_token(ATTR_EQ)) return true;
    if (jj_scan_token(ATTR_VAL)) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    if (jj_scan_token(TAG_NAME)) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_scan_token(DOCTYPE_WORD)) return true;
    return false;
  }

  static final private boolean jj_3R_8() {
    if (jj_scan_token(CDATA_START)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_15()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CDATA_END)) return true;
    return false;
  }

  static final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    if (jj_3R_20()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public BuildReleaseTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1c30000,0x20000,0x0,0x0,0x40000000,0x40000000,0x1810000,0x0,0x0,0x300000,0x0,0x0,0x1c30000,0x1fb0000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1c000,0x1c000,0x0,0x0,0x0,0x380,0x380,0x0,0x1000,0xc00,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public BuildRelease(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BuildReleaseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BuildRelease(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BuildReleaseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BuildRelease(BuildReleaseTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(BuildReleaseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[49];
    for (int i = 0; i < 49; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
