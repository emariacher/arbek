import java.io.*;
import java.util.regex.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.*;
import org.xml.sax.ext.LexicalHandler;
import org.xml.sax.helpers.DefaultHandler;

/**
 *  Description of the Class
 *
 *@author     Eric Mariacher
 *@created    December 12, 2005
 */
public class saxzefile extends DefaultHandler implements LexicalHandler, DefVar {
  private static Writer out;
  private String indentString  = "  "; // Amount to indent
  private int indentLevel      = 0;
  boolean trace;
  boolean done                 = false;

  /* ******** ajoute tes machins ici: debut */
  Log L;
  int cpt                      = 0;
  XmlTag[] xt_active           = new XmlTag[MAXHIERARCHYXML];


  /* ******** ajoute tes machins ici: fin */
  /**
   *  Description of the Method
   *
   *@param  zefile  Description of the Parameter
   *@param  L       Description of the Parameter
   *@param  trace   Description of the Parameter
   */
  saxzefile(File zefile, Log L, boolean trace) {
    /* ******** ajoute tes machins ici: debut */
    this.L = new Log(L);
    this.trace = trace;
    xt_active[0] = new XmlTag();
    /* ******** ajoute tes machins ici: fin */
          // Use an instance of ourselves as the SAX event handler
          //saxzefile handler         = new saxzefile();
          // Use the validating parser
    SAXParserFactory factory  = SAXParserFactory.newInstance();
          //factory.setValidating(true);
          //factory.setNamespaceAware(true);
    try {
          // Set up output stream
      out = new OutputStreamWriter(System.err, "UTF8");

          // Parse the input
      SAXParser saxParser  = factory.newSAXParser();
      XMLReader xmlReader  = saxParser.getXMLReader();
      xmlReader.setProperty("http://xml.org/sax/properties/lexical-handler", this);

      saxParser.parse(zefile, this);
      done = true;
    } catch(SAXParseException spe) {
          // Error generated by the parser
      System.out.println("\n** Parsing error"
           + ", line " + spe.getLineNumber()
           + ", uri " + spe.getSystemId());
      System.out.println("   " + spe.getMessage());
          // Use the contained exception, if any
      Exception x  = spe;
      if(spe.getException() != null) {
        x = spe.getException();
      }
      x.printStackTrace();
      System.exit(0);
    } catch(SAXException sxe) {
          // Error generated by this application
          // (or a parser-initialization error)
      Exception x  = sxe;
      if(sxe.getException() != null) {
        x = sxe.getException();
      }
      x.printStackTrace();
      System.exit(0);
    } catch(ParserConfigurationException pce) {
          // Parser with specified options can't be built
      pce.printStackTrace();
      System.exit(0);
    } catch(IOException ioe) {
          // I/O error
      ioe.printStackTrace();
      System.exit(0);
    } catch(Exception e) {
      e.printStackTrace();
      System.exit(0);
    }
          //System.exit(0);
  }


          //===========================================================
          // SAX DocumentHandler methods
          //===========================================================

  /**
   *  Sets the documentLocator attribute of the MmAsInput object
   *
   *@param  l  The new documentLocator value
   */
  public void setDocumentLocator(Locator l) {
          // Save this to resolve relative URIs or to give diagnostics.
    try {
      out.write("LOCATOR");
      out.write("\n SYS ID: " + l.getSystemId());
      out.flush();
      L.myPrintln("LOCATOR\n SYS ID: " + l.getSystemId());
    } catch(Exception e) {
          // Ignore errors
    }
  }


  /**
   *  Description of the Method
   *
   *@exception  SAXException  Description of the Exception
   */
  public void startDocument() throws SAXException {
    nl();
    nl();
    emit("START DOCUMENT");
    nl();
    emit("<?xml version='1.0' encoding='UTF-8'?>");
  }


  /**
   *  Description of the Method
   *
   *@exception  SAXException  Description of the Exception
   */
  public void endDocument()
       throws SAXException {
    nl();
    emit("END DOCUMENT");
    try {
      nl();
      out.flush();
    } catch(IOException e) {
      throw new SAXException("I/O error", e);
    }
  }


  /**
   *  Description of the Method
   *
   *@param  namespaceURI      Description of the Parameter
   *@param  lName             Description of the Parameter
   *@param  qName             Description of the Parameter
   *@param  attrs             Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  public void startElement(String namespaceURI,
      String lName,  // local name
  String qName,  // qualified name
  Attributes attrs)
       throws SAXException {
    indentLevel++;
    cpt++;
    xt_active[indentLevel] = new XmlTag(xt_active[indentLevel - 1]);
    xt_active[indentLevel - 1].addChild(xt_active[indentLevel]);
    nl();
    emit("ELEMENT[" + indentLevel + "]: ");
    String eName  = lName; // element name
    if("".equals(eName)) {
      eName = qName;
    } // namespaceAware = false
    emit("<" + eName);
    xt_active[indentLevel].name(eName);
    if(attrs != null) {
      for(int i = 0; i < attrs.getLength(); i++) {
        String aName  = attrs.getLocalName(i); // Attr name
        if("".equals(aName)) {
          aName = attrs.getQName(i);
        }
        nl();
        emit("   ATTR: ");
        emit(aName);
        emit("\t\"");
        emit(attrs.getValue(i));
        emit("\"");
        xt_active[indentLevel].addAttribute(new XmlAttribute(attrs.getLocalName(i), attrs.getValue(i)));
      }
    }
    if(trace) {
      displayLogMsg(cpt + " [" + indentLevel + "]<" + eName + ">");
    }
    if(attrs.getLength() > 0) {
      nl();
    }
    emit(">");
  }


  /**
   *  Description of the Method
   *
   *@param  namespaceURI      Description of the Parameter
   *@param  sName             Description of the Parameter
   *@param  qName             Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  public void endElement(String namespaceURI,
      String sName,  // simple name
  String qName // qualified name
  )
       throws SAXException {
    nl();
    emit("END_ELM[" + indentLevel + "]: ");
    emit("</" + qName + ">");
    indentLevel--;
  }


  /**
   *  Description of the Method
   *
   *@param  buf               Description of the Parameter
   *@param  offset            Description of the Parameter
   *@param  len               Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  public void characters(char buf[], int offset, int len)
       throws SAXException {
    nl();
    emit("CHARS[" + indentLevel + "]:   ");
    String s  = new String(buf, offset, len);
    /* ******** ajoute tes machins ici: debut */
    /*if(s.matches("\\S+")) {*/
    if(s.trim().length() > 0) {
      xt_active[indentLevel].addNoTag(s.trim());
    }
    /* ******** ajoute tes machins ici: fin */
    if(s.trim().length() > 0) {
      emit(s);
    }
  }


  /**
   *  Description of the Method
   *
   *@param  buf               Description of the Parameter
   *@param  offset            Description of the Parameter
   *@param  len               Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  public void ignorableWhitespace(char buf[], int offset, int len)
       throws SAXException {
          // Ignore it
  }


  /**
   *  Description of the Method
   *
   *@param  target            Description of the Parameter
   *@param  data              Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  public void processingInstruction(String target, String data)
       throws SAXException {
    nl();
    emit("PROCESS: ");
    emit("<?" + target + " " + data + "?>");
  }

          //===========================================================
          // SAX ErrorHandler methods
          //===========================================================

          // treat validation errors as fatal
  /**
   *  Description of the Method
   *
   *@param  e                      Description of the Parameter
   *@exception  SAXParseException  Description of the Exception
   */
  public void error(SAXParseException e)
       throws SAXParseException {
    throw e;
  }

          // dump warnings too
  /**
   *  Description of the Method
   *
   *@param  err                    Description of the Parameter
   *@exception  SAXParseException  Description of the Exception
   */
  public void warning(SAXParseException err)
       throws SAXParseException {
    System.out.println("** Warning"
         + ", line " + err.getLineNumber()
         + ", uri " + err.getSystemId());
    System.out.println("   " + err.getMessage());
  }

          //===========================================================
          // LexicalEventListener methods
          //===========================================================

  /**
   *  Description of the Method
   *
   *@param  ch                Description of the Parameter
   *@param  start             Description of the Parameter
   *@param  length            Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  public void comment(char[] ch, int start, int length)
       throws SAXException {
  }


  /**
   *  Description of the Method
   *
   *@exception  SAXException  Description of the Exception
   */
  public void startCDATA()
       throws SAXException {
    nl();
    emit("START CDATA SECTION");
  }


  /**
   *  Description of the Method
   *
   *@exception  SAXException  Description of the Exception
   */
  public void endCDATA()
       throws SAXException {
    nl();
    emit("END CDATA SECTION");
  }


  /**
   *  Description of the Method
   *
   *@param  name              Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  public void startEntity(java.lang.String name)
       throws SAXException {
    nl();
    emit("START ENTITY: " + name);
  }


  /**
   *  Description of the Method
   *
   *@param  name              Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  public void endEntity(java.lang.String name)
       throws SAXException {
    nl();
    emit("END ENTITY: " + name);
  }


  /**
   *  Description of the Method
   *
   *@param  name              Description of the Parameter
   *@param  publicId          Description of the Parameter
   *@param  systemId          Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  public void startDTD(String name, String publicId, String systemId)
       throws SAXException {
    nl();
    emit("START DTD: " + name
         + "\n           publicId=" + publicId
         + "\n           systemId=" + systemId);
  }


  /**
   *  Description of the Method
   *
   *@exception  SAXException  Description of the Exception
   */
  public void endDTD()
       throws SAXException {
    nl();
    emit("END DTD");
  }

          //===========================================================
          // Utility Methods ...
          //===========================================================

          // Wrap I/O exceptions in SAX exceptions, to
          // suit handler signature requirements
  /**
   *  Description of the Method
   *
   *@param  s                 Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  private void emit(String s)
       throws SAXException {
    if(trace) {
      try {
        out.write(s);
        out.flush();
        /* ******** ajoute tes machins ici: debut */
        L.myPrintln(s);
        /* ******** ajoute tes machins ici: fin */
      } catch(Exception e) {
        throw new SAXException("I/O error", e);
      }
    }
  }

          // Start a new line
          // and indent the next line appropriately
  /**
   *  Description of the Method
   *
   *@exception  SAXException  Description of the Exception
   */
  private void nl()
       throws SAXException {
    if(trace) {
      String lineEnd  = System.getProperty("line.separator");
      try {
        out.write(lineEnd);
        L.myPrint(lineEnd);
        for(int i = 0; i < indentLevel; i++) {
          out.write(indentString);
          L.myPrint(indentString);
        }
      } catch(Exception e) {
        throw new SAXException("I/O error", e);
      }
    }
  }


  /* ******** ajoute tes machins ici: debut */
  /**
   *  Gets the root attribute of the saxzefile object
   *
   *@return    The root value
   */
  XmlTag getRoot() {
    return xt_active[1];
  }


  /**
   *  Description of the Method
   *
   *@param  s                 Description of the Parameter
   *@exception  SAXException  Description of the Exception
   */
  void displayLogMsg(String s) throws SAXException {
    try {
      L.displayLogMsg(s);
    } catch(Exception e) {
      throw new SAXException("Log error", e);
    }
  }
  /* ******** ajoute tes machins ici: fin */
}

